{"version":3,"sources":["../source/Input.js"],"names":["React","PureComponent","PropTypes","ReactDOM","reactLifecyclesCompat","AsYouType","parse","ReactInput","classNames","Select","InternationalIcon","FlagComponent","getPreSelectedCountry","getCountrySelectOptions","parsePhoneNumberCharacter","parsePhoneNumber","formatPhoneNumber","generateNationalNumberDigits","migrateParsedInputForNewCountry","getCountryForParsedInput","e164","countries","PhoneNumberInput","props","value","country","labels","international","metadata","parsed_number","pre_selected_country","state","country_select_options","generate_country_select_options","parsed_input","generate_parsed_input","disabled","autoComplete","countrySelectTabIndex","countrySelectMaxItems","countrySelectAriaLabel","countrySelectCloseAriaLabel","showCountrySelect","nativeCountrySelect","saveOnIcons","style","className","inputClassName","countrySelectToggleClassName","error","indicateInvalid","CountrySelectComponent","countrySelectComponent","InputComponent","inputComponent","ext","_","flags","flagComponent","flagsPath","internationalIcon","displayInitialValueAsLocalNumber","locale","phone_number_input_props","show_country_select","store_country_select_instance","on_country_selected","on_country_select_toggle","on_country_select_tab_out","name","undefined","store_number_input_instance","format_phone_number","on_change","on_blur","on_number_key_down","cloneElement","type","old_default_country","new_default_country","new_value","new_state","propTypes","string","onChange","func","isRequired","onBlur","onKeyDown","bool","arrayOf","objectOf","element","number","object","node","shape","country_calling_codes","defaultProps","new_country","old_parsed_input","old_country","new_parsed_input","setState","focus","event","keyCode","country_select","toggle","_event","target","stopPropagation","preventDefault","show","setTimeout","findDOMNode","number_input","map","label","icon"],"mappings":"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","file":"Input.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport ReactDOM from 'react-dom'\nimport reactLifecyclesCompat from 'react-lifecycles-compat'\nimport { AsYouType, parse } from 'libphonenumber-js/custom'\nimport { ReactInput } from 'input-format'\nimport classNames from 'classnames'\n\n// Could have been `import { Select } from 'react-responsive-ui'`\n// but in that case Webpack bundles the whole `react-responsive-ui` package.\nimport Select from 'react-responsive-ui/commonjs/Select'\n\nimport InternationalIcon from './InternationalIcon'\nimport FlagComponent from './Flag'\n\nimport\n{\n\tgetPreSelectedCountry,\n\tgetCountrySelectOptions,\n\tparsePhoneNumberCharacter,\n\tparsePhoneNumber,\n\tformatPhoneNumber,\n\tgenerateNationalNumberDigits,\n\tmigrateParsedInputForNewCountry,\n\tgetCountryForParsedInput,\n\te164\n}\nfrom './input-control'\n\nimport { countries } from './countries'\n\n// Allows passing custom `libphonenumber-js` metadata\n// to reduce the overall bundle size.\n@reactLifecyclesCompat\nexport default class PhoneNumberInput extends PureComponent\n{\n\tstatic propTypes =\n\t{\n\t\t// Phone number in E.164 format.\n\t\t// E.g. \"+12223333333\" for USA.\n\t\tvalue : PropTypes.string,\n\n\t\t// `onChange` handler is called each time\n\t\t// the phone number `<input/>` is edited.\n\t\tonChange : PropTypes.func.isRequired,\n\n\t\t// `onBlur` is usually passed by `redux-form`.\n\t\tonBlur : PropTypes.func,\n\n\t\t// `onKeyDown` handler (e.g. to handle Enter key press).\n\t\tonKeyDown : PropTypes.func,\n\n\t\t// Disables both the phone number `<input/>`\n\t\t// and the country `<select/>`.\n\t\t// (is `false` by default)\n\t\tdisabled : PropTypes.bool.isRequired,\n\n\t\t// Web browser's \"autocomplete\" feature\n\t\t// remembers the phone number being input\n\t\t// and can also autofill the `<input/>`\n\t\t// with previously remembered phone numbers.\n\t\t//\n\t\t// Default value: \"tel\".\n\t\t//\n\t\t// https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\n\t\t//\n\t\t// \"So when should you use autocomplete=\"off\"?\n\t\t//  One example is when you've implemented your own version\n\t\t//  of autocomplete for search. Another example is any form field\n\t\t//  where users will input and submit different kinds of information\n\t\t//  where it would not be useful to have the browser remember\n\t\t//  what was submitted previously\".\n\t\t//\n\t\tautoComplete : PropTypes.string.isRequired,\n\n\t\t// Should the initially passed phone number `value`\n\t\t// be converted to a national phone number for its country.\n\t\t// (is `false` by default)\n\t\tdisplayInitialValueAsLocalNumber : PropTypes.bool.isRequired,\n\n\t\t// The country to be selected by default.\n\t\t// Two-letter country code (\"ISO 3166-1 alpha-2\").\n\t\tcountry : PropTypes.string,\n\n\t\t// Only these countries will be available for selection.\n\t\t// Includes all countries by default.\n\t\tcountries : PropTypes.arrayOf(PropTypes.string).isRequired,\n\n\t\t// Custom country `<select/>` option names.\n\t\t// E.g. `{ ZZ: 'Международный', RU: 'Россия', US: 'США', ... }`\n\t\tlabels : PropTypes.objectOf(PropTypes.string),\n\n\t\t// Country flag icon components.\n\t\t// By default flag icons are inserted as `<img/>`s\n\t\t// with their `src` pointed to `flag-icon-css` github repo.\n\t\t// There might be cases (e.g. an offline application)\n\t\t// where having a large (3 megabyte) `<svg/>` flags\n\t\t// bundle is more appropriate.\n\t\t// `import flags from 'react-phone-number-input/flags'`.\n\t\tflags : PropTypes.objectOf(PropTypes.func),\n\n\t\t// Flag icon component.\n\t\tflagComponent : PropTypes.func.isRequired,\n\n\t\t// A base URL path for national flag SVG icons.\n\t\t// By default it uses the ones from `flag-icon-css` github repo.\n\t\tflagsPath : PropTypes.string.isRequired,\n\n\t\t// Whether to add the \"International\" option\n\t\t// to the list of countries.\n\t\t// By default it's added if the list of `countries` hasn't been overridden.\n\t\tinternational : PropTypes.bool,\n\n\t\t// Custom \"International\" country `<select/>` option icon.\n\t\tinternationalIcon : PropTypes.element.isRequired,\n\n\t\t// Whether to use native country `<select/>` when it's expanded.\n\t\tnativeCountrySelect : PropTypes.bool.isRequired,\n\n\t\t// If set to `false`, then country flags will be shown\n\t\t// for all countries when country `<select/>` is expanded.\n\t\t// By default shows flag only for currently selected country.\n\t\tsaveOnIcons : PropTypes.bool.isRequired,\n\n\t\t// Whether to show country `<select/>`.\n\t\t// (is `true` by default)\n\t\tshowCountrySelect : PropTypes.bool.isRequired,\n\n\t\t// HTML `tabindex` attribute for the country `<select/>`.\n\t\tcountrySelectTabIndex : PropTypes.number,\n\n\t\t// Defines the height (in items) of the expanded country `<select/>`.\n\t\tcountrySelectMaxItems : PropTypes.number,\n\n\t\t// `aria-label` for the `<Select/>`'s toggle `<button/>`.\n\t\tcountrySelectAriaLabel : PropTypes.string,\n\n\t\t// `aria-label` for the `<Select/>`'s \"Close\" button\n\t\t// (which is an \"x\" visible in fullscreen mode).\n\t\t// (not yet implemented but is likely to be).\n\t\tcountrySelectCloseAriaLabel : PropTypes.string,\n\n\t\t// `<Phone/>` component CSS style object.\n\t\tstyle : PropTypes.object,\n\n\t\t// `<Phone/>` component CSS class.\n\t\tclassName : PropTypes.string,\n\n\t\t// `<input/>` CSS class.\n\t\t// Both for the phone number `<input/>` and\n\t\t// the country select autocomplete `<input/>`.\n\t\tinputClassName : PropTypes.string,\n\n\t\t// Country `<select/>` toggle `<button/>` CSS class\n\t\tcountrySelectToggleClassName : PropTypes.string,\n\n\t\t// Country `<select/>` component.\n\t\tcountrySelectComponent : PropTypes.func.isRequired,\n\n\t\t// Phone number `<input/>` component.\n\t\tinputComponent : PropTypes.func.isRequired,\n\n\t\t// Phone number extension element.\n\t\text : PropTypes.node,\n\n\t\t// An error message shown below the phone number `<input/>`.\n\t\terror : PropTypes.string,\n\n\t\t// The `error` is shown only when `indicateInvalid` is true.\n\t\tindicateInvalid : PropTypes.bool,\n\n\t\t// Translation.\n\t\tlocale : PropTypes.objectOf(PropTypes.string),\n\n\t\t// `libphonenumber-js` metadata\n\t\tmetadata : PropTypes.shape\n\t\t({\n\t\t\tcountry_calling_codes : PropTypes.object.isRequired,\n\t\t\tcountries : PropTypes.object.isRequired\n\t\t})\n\t\t.isRequired\n\t}\n\n\tstatic defaultProps =\n\t{\n\t\t// Not disabled.\n\t\tdisabled: false,\n\n\t\t// Remember (and autofill) the value as a phone number.\n\t\tautoComplete: 'tel',\n\n\t\t// Include all countries.\n\t\tcountries,\n\n\t\t// Flag icon component.\n\t\tflagComponent: FlagComponent,\n\n\t\t// By default use icons from `flag-icon-css` github repo.\n\t\tflagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\n\n\t\t// Default \"International\" country `<select/>` option icon (globe).\n\t\tinternationalIcon: (\n\t\t\t<div className={ classNames('react-phone-number-input__icon', 'react-phone-number-input__icon--international') }>\n\t\t\t\t<InternationalIcon/>\n\t\t\t</div>\n\t\t),\n\n\t\t// Whether to use native country `<select/>` when it's expanded.\n\t\tnativeCountrySelect: false,\n\n\t\t// If set to `false`, then country flags will be shown\n\t\t// for all countries when country `<select/>` is expanded.\n\t\t// By default shows flag only for currently selected country.\n\t\t// (is `true` by default to save user's traffic\n\t\t//  because all flags are about 3 MegaBytes)\n\t\tsaveOnIcons: true,\n\n\t\t// Show country `<select/>`.\n\t\tshowCountrySelect: true,\n\n\t\t// Don't convert the initially passed phone number `value`\n\t\t// to a national phone number for its country.\n\t\t// The reason is that the newer generation grows up when\n\t\t// there are no stationary phones and therefore everyone inputs\n\t\t// phone numbers with a `+` in their smartphones\n\t\t// so phone numbers written in international form\n\t\t// are gradually being considered more natural than local ones.\n\t\tdisplayInitialValueAsLocalNumber: false,\n\n\t\t// `<Select/>` from `react-responsive-ui`.\n\t\tcountrySelectComponent : Select,\n\n\t\t// `<ReactInput/>` from `input-format`.\n\t\tinputComponent : ReactInput\n\t}\n\n\tconstructor(props)\n\t{\n\t\tsuper(props)\n\n\t\tconst\n\t\t{\n\t\t\tvalue,\n\t\t\tcountry,\n\t\t\tcountries,\n\t\t\tlabels,\n\t\t\tinternational,\n\t\t\tmetadata\n\t\t}\n\t\t= this.props\n\n\t\tconst parsed_number = parsePhoneNumber(value, metadata)\n\n\t\tconst pre_selected_country = getPreSelectedCountry\n\t\t(\n\t\t\tparsed_number,\n\t\t\tcountry,\n\t\t\tcountries,\n\t\t\tinternational,\n\t\t\tmetadata\n\t\t)\n\n\t\tthis.state =\n\t\t{\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\n\t\t\tprops : this.props,\n\n\t\t\t// The country selected.\n\t\t\tcountry : pre_selected_country,\n\n\t\t\t// Generate country `<select/>` options.\n\t\t\tcountry_select_options : generate_country_select_options(this.props),\n\n\t\t\t// `parsed_input` state property holds user's input.\n\t\t\t// The reason is that there's no way of finding out\n\t\t\t// in which form should `value` be displayed: international or national.\n\t\t\t// E.g. if value is `+78005553535` then it could be input\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n\t\t\tparsed_input : generate_parsed_input(value, parsed_number, this.props),\n\n\t\t\t// `value` property is duplicated in state.\n\t\t\t// The reason is that `getDerivedStateFromProps()`\n\t\t\t// needs this `value` to compare to the new `value` property\n\t\t\t// to find out if `parsed_input` needs updating:\n\t\t\t// If the `value` property changed externally\n\t\t\t// then it won't be equal to state `value`\n\t\t\t// in which case `parsed_input` and `country` get updated.\n\t\t\tvalue\n\t\t}\n\t}\n\n\t// Country `<select/>` `onChange` handler.\n\ton_country_selected = (new_country) =>\n\t{\n\t\tconst { metadata, onChange } = this.props\n\n\t\tconst\n\t\t{\n\t\t\tparsed_input : old_parsed_input,\n\t\t\tcountry      : old_country\n\t\t}\n\t\t= this.state\n\n\t\t// After the new `country` has been selected,\n\t\t// if the phone number `<input/>` holds any digits\n\t\t// then migrate those digits for the new `country`.\n\t\t// If returns `undefined` then it means that it stays the same.\n\t\tconst new_parsed_input = migrateParsedInputForNewCountry\n\t\t(\n\t\t\told_parsed_input,\n\t\t\told_country,\n\t\t\tnew_country,\n\t\t\tmetadata\n\t\t)\n\n\t\tconst new_value = e164(new_parsed_input, new_country, metadata)\n\n\t\tthis.setState\n\t\t({\n\t\t\tcountry : new_country,\n\t\t\tparsed_input : new_parsed_input,\n\t\t\tvalue : new_value\n\t\t},\n\t\t() =>\n\t\t{\n\t\t\t// Update the new `value` property.\n\t\t\t// Doing it after the `state` has been updated\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t\t// with the new `value` which will be compared to `state.value` there.\n\t\t\tonChange(new_value)\n\n\t\t\t// Focus the phone number `<input/>` upon country selection.\n\t\t\t// Doing it in a `setState()` callback because the phone number\n\t\t\t// `<input/>` is hidden while country `<select/>` is expanded.\n\t\t\tthis.focus()\n\t\t})\n\t}\n\n\t// Phone number `<input/>` `onKeyDown` handler.\n\ton_number_key_down = (event) =>\n\t{\n\t\tconst { onKeyDown } = this.props\n\n\t\t// Expand country `<select/>`` on \"Down arrow\" key press.\n\t\tif (event.keyCode === 40) {\n\t\t\tthis.country_select.toggle()\n\t\t}\n\n\t\tif (onKeyDown) {\n\t\t\tonKeyDown(event)\n\t\t}\n\t}\n\n\t// `<input/>` `onChange` handler.\n\t// Updates `value` property accordingly.\n\t// (so that they are kept in sync)\n\ton_change = (parsed_input) =>\n\t{\n\t\tconst\n\t\t{\n\t\t\tonChange,\n\t\t\tcountries,\n\t\t\tinternational,\n\t\t\tmetadata\n\t\t}\n\t\t= this.props\n\n\t\tlet { country } = this.state\n\n\t\tif (parsed_input)\n\t\t{\n\t\t\t// If the phone number being input is an international one\n\t\t\t// then tries to derive the country from the phone number.\n\t\t\t// (regardless of whether there's any country currently selected)\n\t\t\tif (parsed_input[0] === '+')\n\t\t\t{\n\t\t\t\tcountry = getCountryForParsedInput\n\t\t\t\t(\n\t\t\t\t\tparsed_input,\n\t\t\t\t\tcountry,\n\t\t\t\t\tcountries,\n\t\t\t\t\tinternational,\n\t\t\t\t\tmetadata\n\t\t\t\t)\n\t\t\t}\n\t\t\t// If this `onChange()` event was triggered\n\t\t\t// as a result of selecting \"International\" country\n\t\t\t// then force-prepend a `+` sign if the phone number\n\t\t\t// `<input/>` value isn't in international format.\n\t\t\telse if (!country)\n\t\t\t{\n\t\t\t\tparsed_input = '+' + parsed_input\n\t\t\t}\n\t\t}\n\n\t\t// Generate the new `value` property.\n\t\tconst value = e164(parsed_input, country, metadata)\n\n\t\tthis.setState\n\t\t({\n\t\t\tparsed_input,\n\t\t\tvalue,\n\t\t\tcountry\n\t\t},\n\t\t// Update the new `value` property.\n\t\t// Doing it after the `state` has been updated\n\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t// with the new `value` which will be compared to `state.value` there.\n\t\t() => onChange(value))\n\t}\n\n\t// This `onBlur` interceptor is a workaround for `redux-form`\n\t// so that it gets the up-to-date `value` in its `onBlur` handler.\n\t// Without this fix it just gets the actual (raw) input field textual value.\n\t//\n\t// A developer is not supposed to pass this `onBlur` property manually.\n\t// Instead, `redux-form` passes `onBlur` to this component automatically\n\t// and this component patches that `onBlur` handler passing it further to\n\t// `input-format`'s `<ReactInput/>`.\n\t//\n\ton_blur = (event) =>\n\t{\n\t\tconst { value, onBlur } = this.props\n\n\t\tif (!onBlur)\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\tconst _event =\n\t\t{\n\t\t\t...event,\n\t\t\ttarget:\n\t\t\t{\n\t\t\t\t...event.target,\n\t\t\t\tvalue\n\t\t\t}\n\t\t}\n\n\t\t// For `redux-form` event detection.\n\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t_event.stopPropagation = event.stopPropagation\n\t\t_event.preventDefault  = event.preventDefault\n\n\t\treturn onBlur(_event)\n\t}\n\n\t// When country `<select/>` is toggled.\n\ton_country_select_toggle = (show) =>\n\t{\n\t\tthis.setState({\n\t\t\tshow_country_select: show\n\t\t})\n\t}\n\n\t// Focuses phone number `<input/>` field\n\t// on tab out of the country `<select/>`.\n\ton_country_select_tab_out = (event) =>\n\t{\n\t\tevent.preventDefault()\n\n\t\t// Focus the phone number input upon country selection\n\t\t// (do it in a timeout because the `<input/>`\n\t\t//  is hidden while selecting a country)\n\t\tsetTimeout(this.focus, 0)\n\t}\n\n\tformat_phone_number = (value) =>\n\t{\n\t\tconst { metadata } = this.props\n\t\tconst { country } = this.state\n\n\t\treturn formatPhoneNumber(value, country, metadata)\n\t}\n\n\t// Can be called externally.\n\tfocus = () => ReactDOM.findDOMNode(this.number_input).focus()\n\n\tstore_country_select_instance = _ => this.country_select = _\n\n\tstore_number_input_instance = _ => this.number_input = _\n\n\tstatic getDerivedStateFromProps(props, state)\n\t{\n\t\tconst\n\t\t{\n\t\t\tcountry,\n\t\t\tvalue,\n\t\t\tprops:\n\t\t\t{\n\t\t\t\tcountry : old_default_country,\n\t\t\t}\n\t\t}\n\t\t= state\n\n\t\tconst\n\t\t{\n\t\t\tmetadata,\n\t\t\tcountry : new_default_country,\n\t\t\tvalue   : new_value\n\t\t}\n\t\t= props\n\n\t\tconst new_state = { props }\n\n\t\t// If `countries` or `labels` or `international` changed\n\t\t// then re-generate country `<select/>` options.\n\t\tif (props.countries !== state.props.countries ||\n\t\t\tprops.labels !== state.props.labels ||\n\t\t\tprops.international !== state.props.international)\n\t\t{\n\t\t\tnew_state.country_select_options = generate_country_select_options(props)\n\t\t}\n\n\t\t// If the default country changed.\n\t\t// (e.g. in case of ajax GeoIP detection after page loaded)\n\t\t// then select it but only if no phone number has been entered so far.\n\t\t// Because if the user has already started inputting a phone number\n\t\t// then he's okay with no country being selected at all (\"International\")\n\t\t// and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\n\t\tif (new_default_country !== old_default_country && !country && !value && !new_value)\n\t\t{\n\t\t\treturn {\n\t\t\t\t...new_state,\n\t\t\t\tcountry : new_default_country\n\t\t\t}\n\t\t}\n\t\t// If a new `value` is set externally.\n\t\t// (e.g. as a result of an ajax API request\n\t\t//  to get user's phone after page loaded)\n\t\telse if (new_value !== value)\n\t\t{\n\t\t\tconst parsed_number = parsePhoneNumber(new_value, metadata)\n\n\t\t\treturn {\n\t\t\t\t...new_state,\n\t\t\t\tparsed_input : generate_parsed_input(new_value, parsed_number, props),\n\t\t\t\tvalue : new_value,\n\t\t\t\tcountry : new_value ? parsed_number.country : country\n\t\t\t}\n\t\t}\n\t\telse if (new_state.country_select_options)\n\t\t{\n\t\t\treturn new_state\n\t\t}\n\n\t\t// https://github.com/facebook/react/issues/12562\n\t\treturn null\n\t}\n\n\trender()\n\t{\n\t\tconst\n\t\t{\n\t\t\tdisabled,\n\t\t\tautoComplete,\n\t\t\tcountrySelectTabIndex,\n\t\t\tcountrySelectMaxItems,\n\t\t\tcountrySelectAriaLabel,\n\t\t\tcountrySelectCloseAriaLabel,\n\t\t\tshowCountrySelect,\n\t\t\tnativeCountrySelect,\n\t\t\tsaveOnIcons,\n\t\t\tstyle,\n\t\t\tclassName,\n\t\t\tinputClassName,\n\t\t\tcountrySelectToggleClassName,\n\n\t\t\terror,\n\t\t\tindicateInvalid,\n\n\t\t\tcountrySelectComponent : CountrySelectComponent,\n\t\t\tinputComponent : InputComponent,\n\t\t\text,\n\n\t\t\t// Extract `phone_number_input_props` via \"object rest spread\":\n\t\t\tcountries,\n\t\t\tlabels,\n\t\t\tcountry : _,\n\t\t\tflags,\n\t\t\tflagComponent,\n\t\t\tflagsPath,\n\t\t\tinternational,\n\t\t\tinternationalIcon,\n\t\t\tdisplayInitialValueAsLocalNumber,\n\t\t\tlocale,\n\t\t\tmetadata,\n\t\t\t...phone_number_input_props\n\t\t}\n\t\t= this.props\n\n\t\tconst\n\t\t{\n\t\t\tcountry,\n\t\t\tshow_country_select,\n\t\t\tcountry_select_options,\n\t\t\tparsed_input\n\t\t}\n\t\t= this.state\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={ style }\n\t\t\t\tclassName={ classNames('react-phone-number-input',\n\t\t\t\t{\n\t\t\t\t\t'react-phone-number-input--invalid': error && indicateInvalid\n\t\t\t\t},\n\t\t\t\tclassName) }>\n\n\t\t\t\t{/* Country `<select/>` and phone number `<input/>` */}\n\t\t\t\t<div className=\"react-phone-number-input__row\">\n\n\t\t\t\t\t{/* Country `<select/>` */}\n\t\t\t\t\t{ showCountrySelect &&\n\t\t\t\t\t\t<CountrySelectComponent\n\t\t\t\t\t\t\tref={ this.store_country_select_instance }\n\t\t\t\t\t\t\tvalue={ country }\n\t\t\t\t\t\t\toptions={ country_select_options }\n\t\t\t\t\t\t\tonChange={ this.on_country_selected }\n\t\t\t\t\t\t\tdisabled={ disabled }\n\t\t\t\t\t\t\tonToggle={ this.on_country_select_toggle }\n\t\t\t\t\t\t\tonTabOut={ this.on_country_select_tab_out }\n\t\t\t\t\t\t\tnativeExpanded={ nativeCountrySelect }\n\t\t\t\t\t\t\tconcise\n\t\t\t\t\t\t\tautocomplete\n\t\t\t\t\t\t\tautocompleteShowAll\n\t\t\t\t\t\t\tmaxItems={ countrySelectMaxItems }\n\t\t\t\t\t\t\ttabIndex={ countrySelectTabIndex }\n\t\t\t\t\t\t\tfocusUponSelection={ false }\n\t\t\t\t\t\t\tsaveOnIcons={ saveOnIcons }\n\t\t\t\t\t\t\tname={ phone_number_input_props.name ? `${phone_number_input_props.name}__country` : undefined }\n\t\t\t\t\t\t\tariaLabel={ countrySelectAriaLabel }\n\t\t\t\t\t\t\tcloseAriaLabel={ countrySelectCloseAriaLabel }\n\t\t\t\t\t\t\tclassName={ classNames('react-phone-number-input__country',\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'react-phone-number-input__country--native-expanded' : nativeCountrySelect\n\t\t\t\t\t\t\t}) }\n\t\t\t\t\t\t\tinputClassName={ inputClassName }\n\t\t\t\t\t\t\ttoggleClassName={ countrySelectToggleClassName }/>\n\t\t\t\t\t}\n\n\t\t\t\t\t{/* Phone number `<input/>` */}\n\t\t\t\t\t{ !show_country_select &&\n\t\t\t\t\t\t<InputComponent\n\t\t\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\t\t\t{ ...phone_number_input_props }\n\t\t\t\t\t\t\tref={ this.store_number_input_instance }\n\t\t\t\t\t\t\tparse={ parsePhoneNumberCharacter }\n\t\t\t\t\t\t\tformat={ this.format_phone_number }\n\t\t\t\t\t\t\tvalue={ parsed_input }\n\t\t\t\t\t\t\tonChange={ this.on_change }\n\t\t\t\t\t\t\tonBlur={ this.on_blur }\n\t\t\t\t\t\t\tonKeyDown={ this.on_number_key_down }\n\t\t\t\t\t\t\tdisabled={ disabled }\n\t\t\t\t\t\t\tautoComplete={ autoComplete }\n\t\t\t\t\t\t\tclassName={ classNames\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t'rrui__input',\n\t\t\t\t\t\t\t\t'rrui__input-element',\n\t\t\t\t\t\t\t\t'rrui__input-field',\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t'rrui__input-field--invalid'  : error && indicateInvalid,\n\t\t\t\t\t\t\t\t\t'rrui__input-field--disabled' : disabled\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t'react-phone-number-input__phone',\n\t\t\t\t\t\t\t\tinputClassName\n\t\t\t\t\t\t\t) }/>\n\t\t\t\t\t}\n\n\t\t\t\t\t{/* Phone extension `<input/>` */}\n\t\t\t\t\t{ ext && !show_country_select &&\n\t\t\t\t\t\t<label className=\"react-phone-number-input__ext\">\n\t\t\t\t\t\t\t{labels && labels.ext || 'ext.'}\n\t\t\t\t\t\t\t{React.cloneElement(ext,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype : ext.props.type === undefined ? 'number' : ext.props.type,\n\t\t\t\t\t\t\t\tclassName : classNames\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t'rrui__input',\n\t\t\t\t\t\t\t\t\t'rrui__input-element',\n\t\t\t\t\t\t\t\t\t'rrui__input-field',\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t'rrui__input-field--disabled' : disabled\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__ext-input',\n\t\t\t\t\t\t\t\t\tinputClassName,\n\t\t\t\t\t\t\t\t\text.props.className\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</label>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\n\t\t\t\t{/* Error message */}\n\t\t\t\t{ error && indicateInvalid &&\n\t\t\t\t\t<div className={ classNames('rrui__input-error', 'react-phone-number-input__error') }>\n\t\t\t\t\t\t{ error }\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n// Generates country `<select/>` options.\nfunction generate_country_select_options(props)\n{\n\tconst\n\t{\n\t\tcountries,\n\t\tlabels,\n\t\tflags,\n\t\tflagsPath,\n\t\tflagComponent : FlagComponent,\n\t\tinternational,\n\t\tinternationalIcon\n\t}\n\t= props\n\n\treturn getCountrySelectOptions\n\t(\n\t\tcountries,\n\t\tlabels,\n\t\tinternational\n\t)\n\t.map(({ value, label }) =>\n\t({\n\t\tvalue,\n\t\tlabel,\n\t\ticon : value ? () => <FlagComponent country={value} flags={flags} flagsPath={flagsPath}/> : internationalIcon\n\t}))\n}\n\nfunction generate_parsed_input(value, parsed_number, props)\n{\n\tconst\n\t{\n\t\tdisplayInitialValueAsLocalNumber,\n\t\tmetadata\n\t}\n\t= props\n\n\t// If the `value` (E.164 phone number)\n\t// belongs to the currently selected country\n\t// and `displayInitialValueAsLocalNumber` property is `true`\n\t// then convert `value` (E.164 phone number)\n\t// to a local phone number digits.\n\t// E.g. '+78005553535' -> '88005553535'.\n\tif (displayInitialValueAsLocalNumber && parsed_number.country)\n\t{\n\t\treturn generateNationalNumberDigits(parsed_number, metadata)\n\t}\n\n\treturn value\n}"]}