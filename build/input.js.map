{"version":3,"sources":["../source/input.js"],"names":["all_countries","default_dictionary","International","item","code","name","push","toUpperCase","Input","props","countries","value","dictionary","international","internationalIcon","flags","country","should_add_international_option","state","country_code","value_property","correct_value_depending_on_the_country_selected","select_options","label","from_dictionary","icon","undefined","get_country_option_icon","metadata","convertToNational","parsed","format","phone","text","slice","onCountryChange","setState","length","new_props","indexOf","set_country","saveOnIcons","showCountrySelect","flagsPath","nativeExpanded","disabled","selectTabIndex","inputTabIndex","style","className","input_props","country_select_is_shown","markup","can_change_country","select","ref","country_select_toggled","on_country_select_tab_out","select_style","input","on_change","parse","on_key_down","input_style","propTypes","string","onChange","func","isRequired","onBlur","onKeyDown","bool","objectOf","arrayOf","oneOfType","element","number","object","shape","defaultProps","focus","previous_country_code","set_country_code_value","national_number","parse_partial_number","setTimeout","character","could_phone_number_belong_to_country","formatter","template","findDOMNode","event","keyCode","toggle","changed_country","e164","is_shown","preventDefault","partial_national_number","display","verticalAlign","toLowerCase","properties","key","phone_number","phone_number_digits","country_phone_code_to_countries","country_phone_code","possible_country_phone_code","substring"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAIA;;AAEA;;;;AACA;;;;;;AAEA;AACA,IAAMA,gBAAgB,EAAtB;;AAEA;;;AAVA;AACA;AAUA,IAAMC,qBACN;AACCC,gBAAe;;AAGhB;AAJA,CADA,C;;;;;AAMA,mLACA;AAAA,MADWC,IACX;;AAAA,2CACsBA,IADtB;AAAA,MACQC,IADR;AAAA,MACcC,IADd;;AAGCL,gBAAcM,IAAd,CAAmBF,KAAKG,WAAL,EAAnB;AACAN,qBAAmBG,KAAKG,WAAL,EAAnB,IAAyCF,IAAzC;AACA;;AAED;AACA;;;;;;;;;;;;;;;;IACqBG,K;;;AA0IpB,gBAAYC,KAAZ,EACA;AAAA;;AAAA,kIACOA,KADP;;AAAA;;AAAA,oBAYG,MAAKA,KAZR;AAAA,MAKEC,SALF,eAKEA,SALF;AAAA,MAMEC,KANF,eAMEA,KANF;AAAA,MAOEC,UAPF,eAOEA,UAPF;AAAA,MAQEC,aARF,eAQEA,aARF;AAAA,MASEC,iBATF,eASEA,iBATF;AAAA,MAUEC,KAVF,eAUEA,KAVF;AAAA,MAcOC,OAdP,GAcmB,MAAKP,KAdxB,CAcOO,OAdP;;AAgBC;AACA;;AACA,MAAI,CAACA,OAAD,IAAYL,KAAZ,IAAqBA,MAAM,CAAN,MAAa,GAAtC,EACA;AACC;AACAK,aAAU,6BAAML,KAAN,EAAaK,OAAvB;AACA;;AAED;AACA;AACA,MAAI,CAACC,gCAAgC,MAAKR,KAArC,CAAD,IAAgD,CAACO,OAArD,EACA;AACCA,aAAUN,UAAU,CAAV,CAAV;AACA;;AAED;AACA,QAAKQ,KAAL,CAAWC,YAAX,GAA0BH,OAA1B;;AAEA;AACA,MAAIL,KAAJ,EACA;AACC;AACA,SAAKO,KAAL,CAAWE,cAAX,GAA4BT,KAA5B;AACA;AACA;AACA;AACA,SAAKO,KAAL,CAAWP,KAAX,GAAmB,MAAKU,+CAAL,CAAqDV,KAArD,EAA4DK,OAA5D,CAAnB;AACA;;AAED;AACA,QAAKM,cAAL,GAAsB,EAAtB;;AAEA;AACA,MAAIL,gCAAgC,MAAKR,KAArC,CAAJ,EACA;AACC,SAAKa,cAAL,CAAoBhB,IAApB,CACC;AACAiB,WAAQC,gBAAgB,eAAhB,EAAiC,MAAKf,KAAtC,CADR;AAEAgB,UAAQV,UAAU,KAAV,GAAkBW,SAAlB,GAA8BZ;AAFtC,IADD;AAKA;;AAED;AA1DD;AAAA;AAAA;;AAAA;AA2DC,oDAA2BJ,SAA3B,iHACA;AAAA,QADWS,YACX;;AACC,UAAKG,cAAL,CAAoBhB,IAApB,CACC;AACAK,YAAQQ,YADR;AAEAI,YAAQC,gBAAgBL,YAAhB,EAA8B,MAAKV,KAAnC,CAFR;AAGAgB,WAAQE,wBAAwBR,YAAxB,EAAsC,MAAKV,KAA3C;AAHR,KADD;AAMA;AAnEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAoEC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;kEACgDE,K,EAAOQ,Y,EACvD;AAAA,gBACyC,KAAKV,KAD9C;AAAA,OACSmB,QADT,UACSA,QADT;AAAA,OACmBC,iBADnB,UACmBA,iBADnB;;;AAGC,OAAI,CAAClB,KAAL,EACA;AACC;AACA;;AAED;AACA,OAAIQ,YAAJ,EACA;AACC;AACA,QAAIR,MAAM,CAAN,MAAa,GAAb,IAAoBkB,iBAAxB,EACA;AACC;AACA;AACA;;AAEA,SAAMC,SAAS,6BAAMnB,KAAN,EAAaiB,QAAb,CAAf;;AAEA,SAAIE,OAAOd,OAAP,KAAmBG,YAAvB,EACA;AACC,aAAO,KAAKY,MAAL,CAAYD,OAAOE,KAAnB,EAA0Bb,YAA1B,EAAwCc,IAA/C;AACA;;AAED;AACA,YAAOtB,MAAMuB,KAAN,CAAY,CAAZ,CAAP;AACA;;AAED;AACA,WAAOvB,KAAP;AACA;;AAED;AACA;;AAEA;AACA,OAAIA,MAAM,CAAN,MAAa,GAAjB,EACA;AACC;AACA,WAAOA,KAAP;AACA;;AAED;AACA,UAAO,MAAMA,KAAb;AACA;;;yCAEsBQ,Y,EACvB;AAAA,OACSgB,eADT,GAC6B,KAAK1B,KADlC,CACS0B,eADT;;;AAGC,OAAIA,eAAJ,EACA;AACCA,oBAAgBhB,YAAhB;AACA;;AAED,QAAKiB,QAAL,CAAc,EAAEjB,0BAAF,EAAd;AACA;;AAED;;;AAsGA;AACA;;;AAkDA;AACA;;;AAqBA;;;AAMA;;;AAiBA;AACA;AACA;AACA;;;AAkEA;;;AAMA;AACA;;;;;;AAWA;uCAEA;AAAA,OACST,SADT,GACuB,KAAKD,KAD5B,CACSC,SADT;;AAGC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAOA,UAAU2B,MAAV,GAAmB,CAA1B;AACA;;AAED;AACA;AACA;AACA;;;;4CAC0BC,S,EAC1B;AAAA,iBACuC,KAAK7B,KAD5C;AAAA,OACSC,SADT,WACSA,SADT;AAAA,OACoBM,OADpB,WACoBA,OADpB;AAAA,OAC6BL,KAD7B,WAC6BA,KAD7B;;AAGC;AACA;;AACA,OAAI2B,UAAUtB,OAAV,KAAsBA,OAA1B,EACA;AACC;AACA;AACA;AACA,QAAI,CAACL,KAAL,EACA;AACC;AACA,SAAID,UAAU6B,OAAV,CAAkBD,UAAUtB,OAA5B,MAAyC,CAAC,CAA9C,EACA;AACC;AACA,WAAKwB,WAAL,CAAiBF,UAAUtB,OAA3B,EAAoC,KAApC;AACA;AACD;AACD;;AAED;AACA;AACA;AACA,OAAIsB,UAAU3B,KAAV,KAAoBA,KAAxB,EACA;AACC;AACA;AACA;AACA;AACA,QAAI2B,UAAU3B,KAAV,KAAoB,KAAKO,KAAL,CAAWE,cAAnC,EACA;AACC;;AAEA;AACA,SAAID,eAAe,KAAKD,KAAL,CAAWC,YAA9B;;AAEA;AACA;AACA,SAAImB,UAAU3B,KAAV,IAAmB2B,UAAU3B,KAAV,CAAgB,CAAhB,MAAuB,GAA9C,EACA;AACC;AACAQ,qBAAe,6BAAMmB,UAAU3B,KAAhB,EAAuBK,OAAvB,IAAkCG,YAAjD;AACA;;AAED,UAAKiB,QAAL,CACC;AACAjB,gCADA;AAEAR,aAAO,KAAKU,+CAAL,CAAqDiB,UAAU3B,KAA/D,EAAsEQ,YAAtE;AAFP,MADD;AAKA;AACD;AACD;;;2BAGD;AAAA;;AAAA,iBAuBG,KAAKV,KAvBR;AAAA,OAGEG,UAHF,WAGEA,UAHF;AAAA,OAIE6B,WAJF,WAIEA,WAJF;AAAA,OAKEC,iBALF,WAKEA,iBALF;AAAA,OAME7B,aANF,WAMEA,aANF;AAAA,OAOEC,iBAPF,WAOEA,iBAPF;AAAA,OAQEE,OARF,WAQEA,OARF;AAAA,OASEN,SATF,WASEA,SATF;AAAA,OAUEyB,eAVF,WAUEA,eAVF;AAAA,OAWEpB,KAXF,WAWEA,KAXF;AAAA,OAYE4B,SAZF,WAYEA,SAZF;AAAA,OAaEd,iBAbF,WAaEA,iBAbF;AAAA,OAcEe,cAdF,WAcEA,cAdF;AAAA,OAeEC,QAfF,WAeEA,QAfF;AAAA,OAgBEC,cAhBF,WAgBEA,cAhBF;AAAA,OAiBEC,aAjBF,WAiBEA,aAjBF;AAAA,OAkBEC,KAlBF,WAkBEA,KAlBF;AAAA,OAmBEC,SAnBF,WAmBEA,SAnBF;AAAA,OAoBErB,QApBF,WAoBEA,QApBF;AAAA,OAqBKsB,WArBL;AAAA,gBA+BG,KAAKhC,KA/BR;AAAA,OA2BEP,KA3BF,UA2BEA,KA3BF;AAAA,OA4BEQ,YA5BF,UA4BEA,YA5BF;AAAA,OA6BEgC,uBA7BF,UA6BEA,uBA7BF;;;AAiCC,OAAMC,SAEL;AAAA;AAAA,MAAK,OAAQJ,KAAb,EAAqB,WAAY,0BAAW,0BAAX,EAAuCC,SAAvC,CAAjC;AACGP,yBAAqB,KAAKW,kBAAL,EAArB,IACD;AACC,UAAM;AAAA,aAAO,OAAKC,MAAL,GAAcC,IAArB;AAAA,MADP;AAEC,YAAQpC,YAFT;AAGC,cAAU,KAAKG,cAHhB;AAIC,eAAW,KAAKkB,WAJjB;AAKC,eAAWK,QALZ;AAMC,eAAW,KAAKW,sBANjB;AAOC,eAAW,KAAKC,yBAPjB;AAQC,qBAAiBb,cARlB;AASC,uBATD;AAUC,8BAVD;AAWC,kBAXD;AAYC,eAAWE,cAZZ;AAaC,yBAAqB,KAbtB;AAcC,kBAAcL,WAdf;AAeC,WAAOS,YAAY7C,IAAZ,GAAsB6C,YAAY7C,IAAlC,iBAAoDqB,SAf5D;AAgBC,gBAAU,mCAhBX;AAiBC,YAAQgC,YAjBT,GAFF;AAsBG,KAACP,uBAAD,IACD,kFACMD,WADN;AAEC,UAAM;AAAA,aAAO,OAAKS,KAAL,GAAaJ,KAApB;AAAA,MAFP;AAGC,YAAQ5C,KAHT;AAIC,eAAW,KAAKiD,SAJjB;AAKC,eAAWf,QALZ;AAMC,WAAK,KANN;AAOC,eAAWE,aAPZ;AAQC,YAAQ,KAAKc,KARd;AASC,aAAS,KAAK9B,MATf;AAUC,gBAAY,KAAK+B,WAVlB;AAWC,gBAAY,0BAAW,aAAX,EAA0B,iCAA1B,CAXb;AAYC,YAAQC,WAZT;AAvBF,IAFD;;AA0CA,UAAOX,MAAP;AACA;;;;;AAGF;AACA;AACA;AACA;AACA;AACA;;;AAvtBqB5C,K,CAEbwD,S,GACP;AACC;AACA;AACA;AACArD,QAAQ,oBAAUsD,MAJnB;;AAMC;AACA;AACAC,WAAW,oBAAUC,IAAV,CAAeC,UAR3B;;AAUC;AACA;AACA;AACA;AACA;AACA;AACAC,SAAS,oBAAUF,IAhBpB;;AAkBC;AACA;AACAG,YAAY,oBAAUH,IApBvB;;AAsBC;AACA;AACAtB,WAAW,oBAAU0B,IAAV,CAAeH,UAxB3B;;AA0BC;AACA;AACA;AACApD,UAAU,oBAAUiD,MA7BrB;;AA+BC;AACA;AACA;AACA;AACA;AACA9B,kBAAkB,oBAAUgC,IApC7B;;AAsCC;AACA;AACAvD,aAAa,oBAAU4D,QAAV,CAAmB,oBAAUP,MAA7B,CAxCd;;AA0CC;AACAvD,YAAY,oBAAU+D,OAAV,CAAkB,oBAAUR,MAA5B,EAAoCG,UA3CjD;;AA6CC;AACArD,QAAQ,oBAAU2D,SAAV,CACP,CACA,oBAAUF,QAAV,CAAmB,oBAAUG,OAA7B,CADA,EAEA,oBAAUJ,IAFV,CADO,CA9CT;;AAoDC;AACA;AACA5B,YAAY,oBAAUsB,MAAV,CAAiBG,UAtD9B;;AAwDC;AACAxB,iBAAiB,oBAAU2B,IAAV,CAAeH,UAzDjC;;AA2DC;AACA;AACA;AACA3B,cAAc,oBAAU8B,IAAV,CAAeH,UA9D9B;;AAgEC;AACA;AACA1B,oBAAoB,oBAAU6B,IAAV,CAAeH,UAlEpC;;AAoEC;AACA;AACAvD,gBAAgB,oBAAU0D,IAtE3B;;AAwEC;AACAzD,oBAAoB,oBAAU6D,OAAV,CAAkBP,UAzEvC;;AA2EC;AACA;AACA;AACAvC,oBAAoB,oBAAU0C,IAAV,CAAeH,UA9EpC;;AAgFC;AACAtB,iBAAoB,oBAAU8B,MAjF/B;;AAmFC;AACA7B,gBAAoB,oBAAU6B,MApF/B;;AAsFC;AACA5B,QAAQ,oBAAU6B,MAvFnB;;AAyFC;AACA5B,YAAY,oBAAUgB,MA1FvB;;AA4FC;AACArC,WAAW,oBAAUkD,KAAV,CACV;AACApE,aAAY,oBAAUmE,MAAV,CAAiBT;AAD7B,EADU,EAIVA;AAjGF,C;AAHoB5D,K,CAuGbuE,Y,GACP;AACC;AACAlC,WAAU,KAFX;;AAIC;AACAnC,YAAWV,aALZ;;AAOC;AACA2C,YAAW,kDARZ;;AAUC;AACA7B,oBAAmB;AAAA;AAAA,IAAK,WAAU,8EAAf;AAA8F;AAA9F,EAXpB;;AAaC;AACAF,aAAY,EAdb;;AAgBC;AACAgC,iBAAgB,KAjBjB;;AAmBC;AACA;AACA;AACAH,cAAa,IAtBd;;AAwBC;AACAC,oBAAmB,IAzBpB;;AA2BC;AACA;AACAb,oBAAmB;AA7BpB,C;;;;;MAgCAX,K,GAAQ,E;;MAoJRsB,W,GAAc,UAACrB,YAAD,EAAe6D,KAAf,EACd;AAAA,MACSpD,QADT,GACsB,OAAKnB,KAD3B,CACSmB,QADT;;AAGC;;AACA,MAAMqD,wBAAwB,OAAK/D,KAAL,CAAWC,YAAzC;;AAEA,SAAK+D,sBAAL,CAA4B/D,YAA5B;;AAEA;AACA;;AATD,MAWOR,KAXP,GAWiB,OAAKO,KAXtB,CAWOP,KAXP;;AAaC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIA,KAAJ,EACA;AACC;AACA,OAAI,CAACsE,qBAAD,IAA0B9D,YAA9B,EACA;AACC;AACA,QAAMW,SAAS,6BAAMnB,KAAN,EAAaiB,QAAb,CAAf;;AAEA;AACA;AACA,QAAIE,OAAOd,OAAP,KAAmBG,YAAvB,EACA;AACCR,aAAQ,OAAKoB,MAAL,CAAYD,OAAOE,KAAnB,EAA0Bb,YAA1B,EAAwCc,IAAhD;AACA;AACD;AAJA,SAMA;AACCtB,cAAQA,MAAMuB,KAAN,CAAY,CAAZ,CAAR;AACA;AACD;;AAED,OAAI+C,yBAAyB9D,YAA7B,EACA;AACC,QAAIR,MAAM,CAAN,MAAa,GAAjB,EACA;AACC,SAAMmB,UAAS,6BAAMnB,KAAN,EAAaiB,QAAb,CAAf;;AAEA,SAAIE,QAAOd,OAAP,KAAmBG,YAAvB,EACA;AACCR,cAAQ,OAAKoB,MAAL,CAAYD,QAAOE,KAAnB,EAA0Bb,YAA1B,EAAwCc,IAAhD;AACA,MAHD,MAKA;AACCtB,cAAQA,MAAMuB,KAAN,CAAY,CAAZ,CAAR;AACA;AACD;AACD;;AAED;AACA,OAAI+C,yBAAyB,CAAC9D,YAA9B,EACA;AACC;AACA,QAAIR,MAAM,CAAN,MAAa,GAAjB,EACA;AACC;AACA,SAAMwE,kBAAkBC,qBAAqBzE,KAArB,EAA4BsE,qBAA5B,EAAmDrD,QAAnD,EAA6DuD,eAArF;AACAxE,aAAQ,8BAAOwE,eAAP,EAAwBF,qBAAxB,EAA+C,yBAA/C,EAA0ErD,QAA1E,CAAR;AACA;AACD;;AAED;AACA;AACA;AACA;AACA,UAAKgC,SAAL,CAAejD,KAAf,EAAsBQ,YAAtB,EAAoC,IAApC;AACA;;AAED;AACA;AACA;AACA,MAAI6D,UAAU,KAAd,EACA;AACCK,cAAW,OAAKL,KAAhB,EAAuB,CAAvB;AACA;AACD,E;;MAIDnB,K,GAAQ,UAACyB,SAAD,EAAY3E,KAAZ,EACR;AAAA,MACSD,SADT,GACuB,OAAKD,KAD5B,CACSC,SADT;;;AAGC,MAAI4E,cAAc,GAAlB,EACA;AACC;AACA,OAAI,CAAC3E,KAAL,EACA;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAO2E,SAAP;AACA;AACD;AACD;AAnBA,OAoBK,IAAIA,aAAa,GAAb,IAAoBA,aAAa,GAArC,EACL;AAAA,QACS1D,QADT,GACsB,OAAKnB,KAD3B,CACSmB,QADT;AAAA,QAEST,YAFT,GAE0B,OAAKD,KAF/B,CAESC,YAFT;;AAIC;AACA;AACA;AACA;AACA;;AAEA,QAAI,CAACF,gCAAgC,OAAKR,KAArC,CAAD,IAAgDE,KAAhD,IAAyDA,MAAM,CAAN,MAAa,GAA1E,EACA;AACC,SAAI,CAAC4E,qCAAqC5E,QAAQ2E,SAA7C,EAAwDnE,YAAxD,EAAsES,QAAtE,CAAL,EACA;AACC;AACA;;AAED,YAAO0D,SAAP;AACA;;AAED,WAAOA,SAAP;AACA;AACD,E;;MAIDvD,M,GAAS,UAACpB,KAAD,EACT;AAAA,MADiBQ,YACjB,uEADgC,OAAKD,KAAL,CAAWC,YAC3C;AAAA,MACSS,QADT,GACsB,OAAKnB,KAD3B,CACSmB,QADT;;AAGC;AACA;AACA;;AAEA;;AACA,MAAM4D,YAAY,kCAAgBrE,YAAhB,EAA8BS,QAA9B,CAAlB;;AAEA;AACA,SAAK4D,SAAL,GAAiBA,SAAjB;;AAEA;AACA,MAAMvD,OAAOuD,UAAU7B,KAAV,CAAgBhD,KAAhB,CAAb;;AAEA,SAAO,EAAEsB,UAAF,EAAQwD,UAAUD,UAAUC,QAA5B,EAAP;AACA,E;;MAGDT,K,GAAQ,YACR;AACC,qBAASU,WAAT,CAAqB,OAAK/B,KAA1B,EAAiCqB,KAAjC;AACA,E;;MAGDlB,W,GAAc,UAAC6B,KAAD,EACd;AAAA,MACSrB,SADT,GACuB,OAAK7D,KAD5B,CACS6D,SADT;;AAGC;;AACA,MAAIqB,MAAMC,OAAN,KAAkB,EAAtB,EACA;AACC,UAAKtC,MAAL,CAAYuC,MAAZ;AACA;;AAED,MAAIvB,SAAJ,EACA;AACCA,aAAUqB,KAAV;AACA;AACD,E;;MAMD/B,S,GAAY,UAACjD,KAAD,EACZ;AAAA,MADoBQ,YACpB,uEADmC,OAAKD,KAAL,CAAWC,YAC9C;AAAA,MAD4D2E,eAC5D,uEAD8E,KAC9E;AAAA,gBACgC,OAAKrF,KADrC;AAAA,MACSmB,QADT,WACSA,QADT;AAAA,MACmBsC,QADnB,WACmBA,QADnB;;AAGC;;AACA,MAAI,CAACvD,KAAL,EACA;AACC,UAAKyB,QAAL,CACC;AACA;AACA;AACAzB,gBAHA;AAIA;AACA;AACAS,oBAAgBT;AANhB,IADD;AASA;AACA;AAAA,WAAMuD,SAASvD,KAAT,CAAN;AAAA,IAVA;AAWA;;AAED;AACA,MAAIA,MAAM,CAAN,MAAa,GAAjB,EACA;AACC;AACA;AACA;AACA,OAAIA,MAAM0B,MAAN,KAAiB,CAArB,EACA;AACClB,mBAAeO,SAAf;AACA,WAAKwD,sBAAL,CAA4B/D,YAA5B;AACA;AACD;AACA;AACA;AACA;AARA,QASK,IAAI,CAAC2E,eAAD,IAAoB,OAAKN,SAAL,CAAexE,OAAnC,IAA8C,OAAKwE,SAAL,CAAexE,OAAf,KAA2B,KAA7E,EACL;AACCG,oBAAe,OAAKqE,SAAL,CAAexE,OAA9B;AACA,YAAKkE,sBAAL,CAA4B/D,YAA5B;AACA;AACD;AACD;AACA;AACA;AAtBA,OAuBK,IAAI,CAACA,YAAL,EACL;AACCR,YAAQ,MAAMA,KAAd;AACA;;AAED;AACA,MAAMS,iBAAiB2E,KAAKpF,KAAL,EAAYQ,YAAZ,EAA0BS,QAA1B,CAAvB;;AAEA,SAAKQ,QAAL,CACC;AACA;AACA;AACAzB,eAHA;AAIA;AACA;AACAS;AANA,GADD;AASA;AACA;AAAA,UAAM8C,SAAS9C,cAAT,CAAN;AAAA,GAVA;AAWA,E;;MAGDoC,sB,GAAyB,UAACwC,QAAD,EACzB;AACC,SAAK5D,QAAL,CAAc,EAAEe,yBAAyB6C,QAA3B,EAAd;AACA,E;;MAIDvC,yB,GAA4B,UAACkC,KAAD,EAC5B;AACCA,QAAMM,cAAN;;AAEA;AACA;AACA;AACAZ,aAAW,OAAKL,KAAhB,EAAuB,CAAvB;AACA,E;;;kBAtjBmBxE,K;AAwtBrB,SAAS4E,oBAAT,CAA8BzE,KAA9B,EAAqCQ,YAArC,EAAmDS,QAAnD,EACA;AACC;AACA,KAAM4D,YAAY,kCAAgBrE,YAAhB,EAA8BS,QAA9B,CAAlB;;AAEA;AACA4D,WAAU7B,KAAV,CAAgBhD,KAAhB;;AAEA;AACA;AACA,QAAO6E,SAAP;AACA;;AAED;AACA,SAASO,IAAT,CAAcpF,KAAd,EAAqBQ,YAArB,EAAmCS,QAAnC,EACA;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAIT,YAAJ,EACA;AACC,MAAIR,MAAM,CAAN,MAAa,GAAjB,EACA;AACC,UAAOA,KAAP;AACA;;AAED,MAAMuF,0BAA0Bd,qBAAqBzE,KAArB,EAA4BQ,YAA5B,EAA0CgE,eAA1E;AACA,SAAO,8BAAOe,uBAAP,EAAgC/E,YAAhC,EAA8C,yBAA9C,EAAyES,QAAzE,CAAP;AACA;;AAED,KAAIjB,MAAM,CAAN,MAAa,GAAjB,EACA;AACC,SAAOA,KAAP;AACA;;AAED,QAAO,MAAMA,KAAb;AACA;;AAED,IAAM+C,eACN;AACCyC,UAAgB,cADjB;AAECC,gBAAgB;AAFjB,CADA;;AAMA,IAAMrC,cAAcL,YAApB;;AAEA;AACA,SAAS/B,uBAAT,CAAiCR,YAAjC,SACA;AAAA,KADiDJ,KACjD,SADiDA,KACjD;AAAA,KADwD4B,SACxD,SADwDA,SACxD;;AACC,KAAI5B,UAAU,KAAd,EACA;AACC,SAAOW,SAAP;AACA;;AAED,KAAIX,SAASA,MAAMI,YAAN,CAAb,EACA;AACC,SAAOJ,MAAMI,YAAN,CAAP;AACA;;AAED,QAAO;AACN,aAAU,gCADJ;AAEN,YAAQwB,SAAR,GAAoBxB,aAAakF,WAAb,EAApB,SAFM,GAAP;AAGA;;AAED;AACA,SAASpF,+BAAT,CAAyCqF,UAAzC,EACA;AAAA,KACS5F,SADT,GACsC4F,UADtC,CACS5F,SADT;AAAA,KACoBG,aADpB,GACsCyF,UADtC,CACoBzF,aADpB;;AAGC;;AACA,KAAIA,kBAAkBa,SAAtB,EACA;AACC,SAAOb,aAAP;AACA;;AAED;AACA;AACA,KAAIH,UAAU2B,MAAV,KAAqB,CAAzB,EACA;AACC,SAAO,IAAP;AACA;;AAED;AACA;AACA;AACA,KAAI3B,UAAU2B,MAAV,KAAqB,CAAzB,EACA;AACC,SAAO,KAAP;AACA;;AAED;AACA,QAAO,IAAP;AACA;;AAED;AACA,SAASb,eAAT,CAAyB+E,GAAzB,EAA8BD,UAA9B,EACA;AAAA,KACS1F,UADT,GACwB0F,UADxB,CACS1F,UADT;;;AAGC,QAAOA,WAAW2F,GAAX,KAAmBtG,mBAAmBsG,GAAnB,CAA1B;AACA;;AAED;AACA,SAAShB,oCAAT,CAA8CiB,YAA9C,EAA4DrF,YAA5D,EAA0ES,QAA1E,EACA;AACC;AACA,KAAM6E,sBAAsBD,aAAatE,KAAb,CAAmB,CAAnB,CAA5B;;AAFD;AAAA;AAAA;;AAAA;AAIC,mDAAiC,oBAAYN,SAAS8E,+BAArB,CAAjC,iHACA;AAAA,OADWC,kBACX;;AACC,OAAMC,8BAA8BH,oBAAoBI,SAApB,CAA8B,CAA9B,EAAiCF,mBAAmBtE,MAApD,CAApC;AACA,OAAIsE,mBAAmBpE,OAAnB,CAA2BqE,2BAA3B,MAA4D,CAAhE,EACA;AACC;AACA;AACA,QAAIhF,SAAS8E,+BAAT,CAAyCC,kBAAzC,EAA6DpE,OAA7D,CAAqEpB,YAArE,KAAsF,CAA1F,EACA;AACC,YAAO,IAAP;AACA;AACD;AACD;AAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBC","file":"input.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ReactDOM from 'react-dom'\nimport { as_you_type, parse, format } from 'libphonenumber-js'\nimport { ReactInput } from 'input-format'\nimport classNames from 'classnames'\n\n// Not importing here directly from `react-responsive-ui` npm package\n// just to reduce the overall bundle size.\nimport { Select } from './react-responsive-ui'\n\nimport country_names from './country names.json'\nimport International_icon from './international icon'\n\n// A list of all country codes\nconst all_countries = []\n\n// Country code to country name map\nconst default_dictionary =\n{\n\tInternational: 'International'\n}\n\n// Populate `all_countries` and `default_dictionary`\nfor (const item of country_names)\n{\n\tconst [code, name] = item\n\n\tall_countries.push(code.toUpperCase())\n\tdefault_dictionary[code.toUpperCase()] = name\n}\n\n// Allows passing custom `libphonenumber-js` metadata\n// to reduce the overall bundle size.\nexport default class Input extends Component\n{\n\tstatic propTypes =\n\t{\n\t\t// Phone number `value`.\n\t\t// Is a plaintext international phone number\n\t\t// (e.g. \"+12223333333\" for USA)\n\t\tvalue : PropTypes.string,\n\n\t\t// This handler is called each time\n\t\t// the phone number <input/> changes its textual value.\n\t\tonChange : PropTypes.func.isRequired,\n\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t\t// so that it gets a parsed `value` in its `onBlur` handler,\n\t\t// not the formatted one.\n\t\t// (`redux-form` passed `onBlur` to this component\n\t\t//  and this component intercepts that `onBlur`\n\t\t//  to make sure it works correctly with `redux-form`)\n\t\tonBlur : PropTypes.func,\n\n\t\t// Set `onKeyDown` handler.\n\t\t// Can be used in special cases to handle e.g. enter pressed\n\t\tonKeyDown : PropTypes.func,\n\n\t\t// Disables both the <input/> and the <select/>\n\t\t// (is `false` by default)\n\t\tdisabled : PropTypes.bool.isRequired,\n\n\t\t// Two-letter country code\n\t\t// to be used as the default country\n\t\t// for local (non-international) phone numbers.\n\t\tcountry : PropTypes.string,\n\n\t\t// Is called when the selected country changes\n\t\t// (either by a user manually, or by autoparsing\n\t\t//  an international phone number being input).\n\t\t// This handler does not need to update the `country` property.\n\t\t// It's simply a listener for those who might need that for whatever purpose.\n\t\tonCountryChange : PropTypes.func,\n\n\t\t// Localization dictionary:\n\t\t// `{ International: 'Международный', RU: 'Россия', US: 'США', ... }`\n\t\tdictionary : PropTypes.objectOf(PropTypes.string),\n\n\t\t// An optional list of allowed countries\n\t\tcountries : PropTypes.arrayOf(PropTypes.string).isRequired,\n\n\t\t// Custom national flag icons\n\t\tflags : PropTypes.oneOfType\n\t\t([\n\t\t\tPropTypes.objectOf(PropTypes.element),\n\t\t\tPropTypes.bool\n\t\t]),\n\n\t\t// A base URL path for national flag SVG icons.\n\t\t// By default it uses the ones from `flag-icon-css` github repo.\n\t\tflagsPath : PropTypes.string.isRequired,\n\n\t\t// Whether to use native `<select/>` when expanded\n\t\tnativeExpanded : PropTypes.bool.isRequired,\n\n\t\t// If set to `false`, then country flags will be shown\n\t\t// for all countries in the options list\n\t\t// (not just for selected country).\n\t\tsaveOnIcons : PropTypes.bool.isRequired,\n\n\t\t// Whether to show country `<Select/>`\n\t\t// (is `true` by default)\n\t\tshowCountrySelect : PropTypes.bool.isRequired,\n\n\t\t// Whether to add the \"International\" option\n\t\t// to the list of countries.\n\t\tinternational : PropTypes.bool,\n\n\t\t// Custom \"International\" phone number type icon.\n\t\tinternationalIcon : PropTypes.element.isRequired,\n\n\t\t// Should the initially passed phone number `value`\n\t\t// be converted to a national phone number for its country.\n\t\t// (is `true` by default)\n\t\tconvertToNational : PropTypes.bool.isRequired,\n\n\t\t// HTML `tabindex` attribute for the country select\n\t\tselectTabIndex    : PropTypes.number,\n\n\t\t// HTML `tabindex` attribute for the phone number input\n\t\tinputTabIndex     : PropTypes.number,\n\n\t\t// CSS style object\n\t\tstyle : PropTypes.object,\n\n\t\t// CSS class\n\t\tclassName : PropTypes.string,\n\n\t\t// `libphonenumber-js` metadata\n\t\tmetadata : PropTypes.shape\n\t\t({\n\t\t\tcountries : PropTypes.object.isRequired\n\t\t})\n\t\t.isRequired\n\t}\n\n\tstatic defaultProps =\n\t{\n\t\t// Is enabled\n\t\tdisabled: false,\n\n\t\t// Include all countries by default\n\t\tcountries: all_countries,\n\n\t\t// By default use the ones from `flag-icon-css` github repo.\n\t\tflagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\n\n\t\t// Default international icon (globe)\n\t\tinternationalIcon: <div className=\"react-phone-number-input__icon react-phone-number-input__icon--international\"><International_icon/></div>,\n\n\t\t// Custom country names\n\t\tdictionary: {},\n\n\t\t// Whether to use native `<select/>` when expanded\n\t\tnativeExpanded: false,\n\n\t\t// Don't show flags for all countries in the options list\n\t\t// (show it just for selected country).\n\t\t// (to save user's traffic because all flags are about 3 MegaBytes)\n\t\tsaveOnIcons: true,\n\n\t\t// Show country `<Select/>` by default\n\t\tshowCountrySelect: true,\n\n\t\t// Convert the initially passed phone number `value`\n\t\t// to a national phone number for its country.\n\t\tconvertToNational: true\n\t}\n\n\tstate = {}\n\n\tconstructor(props)\n\t{\n\t\tsuper(props)\n\n\t\tconst\n\t\t{\n\t\t\tcountries,\n\t\t\tvalue,\n\t\t\tdictionary,\n\t\t\tinternational,\n\t\t\tinternationalIcon,\n\t\t\tflags\n\t\t}\n\t\t= this.props\n\n\t\tlet { country } = this.props\n\n\t\t// Autodetect country if value is set\n\t\t// and is international (which it should be)\n\t\tif (!country && value && value[0] === '+')\n\t\t{\n\t\t\t// Will be left `undefined` in case of non-detection\n\t\t\tcountry = parse(value).country\n\t\t}\n\n\t\t// If there will be no \"International\" option\n\t\t// then a `country` must be selected.\n\t\tif (!should_add_international_option(this.props) && !country)\n\t\t{\n\t\t\tcountry = countries[0]\n\t\t}\n\n\t\t// Set the currently selected country\n\t\tthis.state.country_code = country\n\n\t\t// If a phone number `value` is passed then format it\n\t\tif (value)\n\t\t{\n\t\t\t// Take note of the current `value` property\n\t\t\tthis.state.value_property = value\n\t\t\t// Set the currently entered `value`.\n\t\t\t// State `value` is either in international plaintext or just plaintext format.\n\t\t\t// (e.g. `+78005553535`, `1234567`)\n\t\t\tthis.state.value = this.correct_value_depending_on_the_country_selected(value, country)\n\t\t}\n\n\t\t// `<Select/>` options\n\t\tthis.select_options = []\n\n\t\t// Add the \"International\" option to the country list (if suitable)\n\t\tif (should_add_international_option(this.props))\n\t\t{\n\t\t\tthis.select_options.push\n\t\t\t({\n\t\t\t\tlabel : from_dictionary('International', this.props),\n\t\t\t\ticon  : flags === false ? undefined : internationalIcon\n\t\t\t})\n\t\t}\n\n\t\t// Add a `<Select/>` option for each country\n\t\tfor (const country_code of countries)\n\t\t{\n\t\t\tthis.select_options.push\n\t\t\t({\n\t\t\t\tvalue : country_code,\n\t\t\t\tlabel : from_dictionary(country_code, this.props),\n\t\t\t\ticon  : get_country_option_icon(country_code, this.props)\n\t\t\t})\n\t\t}\n\t}\n\n\t// If the country code is specified\n\t//   If the value has a leading plus sign\n\t//     If it converts into a valid national number for this country\n\t//       Then the value is set to be that national number\n\t//     Else\n\t//       The leading + sign is trimmed\n\t//   Else\n\t//     The value stays as it is\n\t// Else\n\t//   If the value has a leading + sign\n\t//     The value stays as it is\n\t//   Else\n\t//     The + sign is prepended\n\t//\n\tcorrect_value_depending_on_the_country_selected(value, country_code)\n\t{\n\t\tconst { metadata, convertToNational } = this.props\n\n\t\tif (!value)\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\t// If the country code is specified\n\t\tif (country_code)\n\t\t{\n\t\t\t// If the value has a leading plus sign\n\t\t\tif (value[0] === '+' && convertToNational)\n\t\t\t{\n\t\t\t\t// If it's a fully-entered phone number\n\t\t\t\t// that converts into a valid national number for this country\n\t\t\t\t// then the value is set to be that national number.\n\n\t\t\t\tconst parsed = parse(value, metadata)\n\n\t\t\t\tif (parsed.country === country_code)\n\t\t\t\t{\n\t\t\t\t\treturn this.format(parsed.phone, country_code).text\n\t\t\t\t}\n\n\t\t\t\t// Else the leading + sign is trimmed.\n\t\t\t\treturn value.slice(1)\n\t\t\t}\n\n\t\t\t// Else the value stays as it is\n\t\t\treturn value\n\t\t}\n\n\t\t// The country is not set.\n\t\t// Assuming that's an international phone number.\n\n\t\t// If the value has a leading + sign\n\t\tif (value[0] === '+')\n\t\t{\n\t\t\t// The value is correct\n\t\t\treturn value\n\t\t}\n\n\t\t// The + sign is prepended\n\t\treturn '+' + value\n\t}\n\n\tset_country_code_value(country_code)\n\t{\n\t\tconst { onCountryChange } = this.props\n\n\t\tif (onCountryChange)\n\t\t{\n\t\t\tonCountryChange(country_code)\n\t\t}\n\n\t\tthis.setState({ country_code })\n\t}\n\n\t// `<select/>` `onChange` handler\n\tset_country = (country_code, focus) =>\n\t{\n\t\tconst { metadata } = this.props\n\n\t\t// Previously selected country\n\t\tconst previous_country_code = this.state.country_code\n\n\t\tthis.set_country_code_value(country_code)\n\n\t\t// Adjust the phone number (`value`)\n\t\t// according to the selected `country_code`\n\n\t\tlet { value } = this.state\n\n\t\t// If switching to a country from International\n\t\t//   If the international number belongs to this country\n\t\t//     Convert it to a national number\n\t\t//   Else\n\t\t//     Trim the leading + sign\n\t\t//\n\t\t// If switching to a country from a country\n\t\t//   If the value has a leading + sign\n\t\t//     If the international number belongs to this country\n\t\t//       Convert it to a national number\n\t\t//     Else\n\t\t//       Trim the leading + sign\n\t\t//   Else\n\t\t//     The value stays as it is\n\t\t//\n\t\t// If switching to International from a country\n\t\t//   If the value has a leading + sign\n\t\t//     The value stays as it is\n\t\t//   Else\n\t\t//     Take the international plaintext value\n\n\t\tif (value)\n\t\t{\n\t\t\t// If switching to a country from International\n\t\t\tif (!previous_country_code && country_code)\n\t\t\t{\n\t\t\t\t// The value is international plaintext\n\t\t\t\tconst parsed = parse(value, metadata)\n\n\t\t\t\t// If it's for this country,\n\t\t\t\t// then convert it to a national number\n\t\t\t\tif (parsed.country === country_code)\n\t\t\t\t{\n\t\t\t\t\tvalue = this.format(parsed.phone, country_code).text\n\t\t\t\t}\n\t\t\t\t// Else just trim the + sign\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvalue = value.slice(1)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (previous_country_code && country_code)\n\t\t\t{\n\t\t\t\tif (value[0] === '+')\n\t\t\t\t{\n\t\t\t\t\tconst parsed = parse(value, metadata)\n\n\t\t\t\t\tif (parsed.country === country_code)\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue = this.format(parsed.phone, country_code).text\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue = value.slice(1)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If switching to International from a country\n\t\t\tif (previous_country_code && !country_code)\n\t\t\t{\n\t\t\t\t// If no leading + sign\n\t\t\t\tif (value[0] !== '+')\n\t\t\t\t{\n\t\t\t\t\t// Take the international plaintext value\n\t\t\t\t\tconst national_number = parse_partial_number(value, previous_country_code, metadata).national_number\n\t\t\t\t\tvalue = format(national_number, previous_country_code, 'International_plaintext', metadata)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update the adjusted `value`\n\t\t\t// and update `this.props.value` (in e.164 phone number format)\n\t\t\t// according to the new `this.state.value`.\n\t\t\t// (keep them in sync)\n\t\t\tthis.on_change(value, country_code, true)\n\t\t}\n\n\t\t// Focus the phone number input upon country selection\n\t\t// (do it in a timeout because the `<input/>`\n\t\t//  is hidden while selecting a country)\n\t\tif (focus !== false)\n\t\t{\n\t\t\tsetTimeout(this.focus, 0)\n\t\t}\n\t}\n\n\t// `input-format` `parse` character function\n\t// https://github.com/halt-hammerzeit/input-format\n\tparse = (character, value) =>\n\t{\n\t\tconst { countries } = this.props\n\n\t\tif (character === '+')\n\t\t{\n\t\t\t// Only allow a leading `+`\n\t\t\tif (!value)\n\t\t\t{\n\t\t\t\t// If the \"International\" option is available\n\t\t\t\t// then allow the leading `+` because it's meant to be this way.\n\t\t\t\t//\n\t\t\t\t// Otherwise, the leading `+` will either erase all subsequent digits\n\t\t\t\t// (if they're not appropriate for the selected country)\n\t\t\t\t// or the subsequent digits (if any) will join the `+`\n\t\t\t\t// forming an international phone number. Because a user\n\t\t\t\t// might be comfortable with entering an international phone number\n\t\t\t\t// (i.e. with country code) rather than the local one.\n\t\t\t\t// Therefore such possibility is given.\n\t\t\t\t//\n\t\t\t\treturn character\n\t\t\t}\n\t\t}\n\t\t// For digits\n\t\telse if (character >= '0' && character <= '9')\n\t\t{\n\t\t\tconst { metadata } = this.props\n\t\t\tconst { country_code } = this.state\n\n\t\t\t// If the \"International\" option is not available\n\t\t\t// and if the value has a leading `+`\n\t\t\t// then it means that the phone number being entered\n\t\t\t// is an international one, so only allow the country phone code\n\t\t\t// for the selected country to be entered.\n\n\t\t\tif (!should_add_international_option(this.props) && value && value[0] === '+')\n\t\t\t{\n\t\t\t\tif (!could_phone_number_belong_to_country(value + character, country_code, metadata))\n\t\t\t\t{\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\treturn character\n\t\t\t}\n\n\t\t\treturn character\n\t\t}\n\t}\n\n\t// `input-format` `format` function\n\t// https://github.com/halt-hammerzeit/input-format\n\tformat = (value, country_code = this.state.country_code) =>\n\t{\n\t\tconst { metadata } = this.props\n\n\t\t// `value` is already parsed input, i.e.\n\t\t// either International plaintext phone number\n\t\t// or just local phone number digits.\n\n\t\t// \"As you type\" formatter\n\t\tconst formatter = new as_you_type(country_code, metadata)\n\n\t\t// Is used to check if a country code can already be derived\n\t\tthis.formatter = formatter\n\n\t\t// Format phone number\n\t\tconst text = formatter.input(value)\n\n\t\treturn { text, template: formatter.template }\n\t}\n\n\t// Can be called externally\n\tfocus = () =>\n\t{\n\t\tReactDOM.findDOMNode(this.input).focus()\n\t}\n\n\t// `<input/>` `onKeyDown` handler\n\ton_key_down = (event) =>\n\t{\n\t\tconst { onKeyDown } = this.props\n\n\t\t// Expand country `<select/>`` on \"Down arrow\" key press\n\t\tif (event.keyCode === 40)\n\t\t{\n\t\t\tthis.select.toggle()\n\t\t}\n\n\t\tif (onKeyDown)\n\t\t{\n\t\t\tonKeyDown(event)\n\t\t}\n\t}\n\n\t// `<input/>` `onChange` handler.\n\t// Updates `this.props.value` (in e.164 phone number format)\n\t// according to the new `this.state.value`.\n\t// (keeps them in sync)\n\ton_change = (value, country_code = this.state.country_code, changed_country = false) =>\n\t{\n\t\tconst { metadata, onChange } = this.props\n\n\t\t// If the `<input/>` is empty then just exit\n\t\tif (!value)\n\t\t{\n\t\t\tthis.setState\n\t\t\t({\n\t\t\t\t// State `value` is the parsed input value\n\t\t\t\t// (e.g. `+78005553535`, `1234567`).\n\t\t\t\tvalue,\n\t\t\t\t// `value_property` holds the `value` property value\n\t\t\t\t// which is being set by this library.\n\t\t\t\tvalue_property: value\n\t\t\t},\n\t\t\t// Write the new `this.props.value`.\n\t\t\t() => onChange(value))\n\t\t}\n\n\t\t// For international phone number\n\t\tif (value[0] === '+')\n\t\t{\n\t\t\t// If an international phone number is being erased up to the first `+` sign\n\t\t\t// or if an international phone number is just starting (with a `+` sign)\n\t\t\t// then unset the current country because it's clear that a user intends to change it.\n\t\t\tif (value.length === 1)\n\t\t\t{\n\t\t\t\tcountry_code = undefined\n\t\t\t\tthis.set_country_code_value(country_code)\n\t\t\t}\n\t\t\t// If a phone number is being input as an international one\n\t\t\t// and the country code can already be derived,\n\t\t\t// then switch the country.\n\t\t\t// (`001` is a special \"non-geograpical entity\" code in `libphonenumber` library)\n\t\t\telse if (!changed_country && this.formatter.country && this.formatter.country !== '001')\n\t\t\t{\n\t\t\t\tcountry_code = this.formatter.country\n\t\t\t\tthis.set_country_code_value(country_code)\n\t\t\t}\n\t\t}\n\t\t// If \"International\" mode is selected\n\t\t// and the `value` doesn't start with a + sign,\n\t\t// then prepend it to the `value`.\n\t\telse if (!country_code)\n\t\t{\n\t\t\tvalue = '+' + value\n\t\t}\n\n\t\t// Convert `value` to E.164 phone number format\n\t\tconst value_property = e164(value, country_code, metadata)\n\n\t\tthis.setState\n\t\t({\n\t\t\t// State `value` is the parsed input value\n\t\t\t// (e.g. `+78005553535`, `1234567`).\n\t\t\tvalue,\n\t\t\t// `value_property` holds the `value` property value\n\t\t\t// which is being set by this library.\n\t\t\tvalue_property\n\t\t},\n\t\t// Write the new `this.props.value`.\n\t\t() => onChange(value_property))\n\t}\n\n\t// When country `<select/>` is toggled\n\tcountry_select_toggled = (is_shown) =>\n\t{\n\t\tthis.setState({ country_select_is_shown: is_shown })\n\t}\n\n\t// Focuses the `<input/>` field\n\t// on tab out of the country `<select/>`\n\ton_country_select_tab_out = (event) =>\n\t{\n\t\tevent.preventDefault()\n\n\t\t// Focus the phone number input upon country selection\n\t\t// (do it in a timeout because the `<input/>`\n\t\t//  is hidden while selecting a country)\n\t\tsetTimeout(this.focus, 0)\n\t}\n\n\t// Can a user change the default country or not.\n\tcan_change_country()\n\t{\n\t\tconst { countries } = this.props\n\n\t\t// If `countries` is empty,\n\t\t// then only \"International\" option is available,\n\t\t// so can't switch it.\n\t\t//\n\t\t// If `countries` is a single allowed country,\n\t\t// then cant's switch it.\n\t\t//\n\t\treturn countries.length > 1\n\t}\n\n\t// Listen for default country property:\n\t// if it is set after the page loads\n\t// and the user hasn't selected a country yet\n\t// then select the default country.\n\tcomponentWillReceiveProps(new_props)\n\t{\n\t\tconst { countries, country, value } = this.props\n\n\t\t// If the default country changed\n\t\t// (e.g. in case of IP detection)\n\t\tif (new_props.country !== country)\n\t\t{\n\t\t\t// If the phone number input field is currently empty\n\t\t\t// (e.g. not touched yet) then change the selected `country`\n\t\t\t// to the newly passed one (e.g. as a result of a GeoIP query)\n\t\t\tif (!value)\n\t\t\t{\n\t\t\t\t// If the passed `country` allowed then update it\n\t\t\t\tif (countries.indexOf(new_props.country) !== -1)\n\t\t\t\t{\n\t\t\t\t\t// Set the new `country`\n\t\t\t\t\tthis.set_country(new_props.country, false)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// This code is executed:\n\t\t// * after `onChange` is called\n\t\t// * if the `value` was eternally set\n\t\tif (new_props.value !== value)\n\t\t{\n\t\t\t// Ignore self `onChange` calls\n\t\t\t// (because the library called `onChange` by itself).\n\t\t\t// Because if the current `value` property representation\n\t\t\t// corresponds to `new_props.value`, then there's no need to update anything.\n\t\t\tif (new_props.value !== this.state.value_property)\n\t\t\t{\n\t\t\t\t// Update the `value` because it was externally set\n\n\t\t\t\t// Country code gets updated too\n\t\t\t\tlet country_code = this.state.country_code\n\n\t\t\t\t// Autodetect country if value is set\n\t\t\t\t// and is international (which it should be)\n\t\t\t\tif (new_props.value && new_props.value[0] === '+')\n\t\t\t\t{\n\t\t\t\t\t// `parse().country` will be `undefined` in case of non-detection\n\t\t\t\t\tcountry_code = parse(new_props.value).country || country_code\n\t\t\t\t}\n\n\t\t\t\tthis.setState\n\t\t\t\t({\n\t\t\t\t\tcountry_code,\n\t\t\t\t\tvalue: this.correct_value_depending_on_the_country_selected(new_props.value, country_code)\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\trender()\n\t{\n\t\tconst\n\t\t{\n\t\t\tdictionary,\n\t\t\tsaveOnIcons,\n\t\t\tshowCountrySelect,\n\t\t\tinternational,\n\t\t\tinternationalIcon,\n\t\t\tcountry,\n\t\t\tcountries,\n\t\t\tonCountryChange,\n\t\t\tflags,\n\t\t\tflagsPath,\n\t\t\tconvertToNational,\n\t\t\tnativeExpanded,\n\t\t\tdisabled,\n\t\t\tselectTabIndex,\n\t\t\tinputTabIndex,\n\t\t\tstyle,\n\t\t\tclassName,\n\t\t\tmetadata,\n\t\t\t...input_props\n\t\t}\n\t\t= this.props\n\n\t\tconst\n\t\t{\n\t\t\tvalue,\n\t\t\tcountry_code,\n\t\t\tcountry_select_is_shown\n\t\t}\n\t\t= this.state\n\n\t\tconst markup =\n\t\t(\n\t\t\t<div style={ style } className={ classNames('react-phone-number-input', className) }>\n\t\t\t\t{ showCountrySelect && this.can_change_country() &&\n\t\t\t\t\t<Select\n\t\t\t\t\t\tref={ ref => this.select = ref }\n\t\t\t\t\t\tvalue={ country_code }\n\t\t\t\t\t\toptions={ this.select_options }\n\t\t\t\t\t\tonChange={ this.set_country }\n\t\t\t\t\t\tdisabled={ disabled }\n\t\t\t\t\t\tonToggle={ this.country_select_toggled }\n\t\t\t\t\t\tonTabOut={ this.on_country_select_tab_out }\n\t\t\t\t\t\tnativeExpanded={ nativeExpanded }\n\t\t\t\t\t\tautocomplete\n\t\t\t\t\t\tautocompleteShowAll\n\t\t\t\t\t\tconcise\n\t\t\t\t\t\ttabIndex={ selectTabIndex }\n\t\t\t\t\t\tfocusUponSelection={ false }\n\t\t\t\t\t\tsaveOnIcons={ saveOnIcons }\n\t\t\t\t\t\tname={ input_props.name ? `${input_props.name}__country` : undefined }\n\t\t\t\t\t\tclassName=\"react-phone-number-input__country\"\n\t\t\t\t\t\tstyle={ select_style }/>\n\t\t\t\t}\n\n\t\t\t\t{ !country_select_is_shown &&\n\t\t\t\t\t<ReactInput\n\t\t\t\t\t\t{ ...input_props }\n\t\t\t\t\t\tref={ ref => this.input = ref }\n\t\t\t\t\t\tvalue={ value }\n\t\t\t\t\t\tonChange={ this.on_change }\n\t\t\t\t\t\tdisabled={ disabled }\n\t\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\t\ttabIndex={ inputTabIndex }\n\t\t\t\t\t\tparse={ this.parse }\n\t\t\t\t\t\tformat={ this.format }\n\t\t\t\t\t\tonKeyDown={ this.on_key_down }\n\t\t\t\t\t\tclassName={ classNames('rrui__input', 'react-phone-number-input__phone') }\n\t\t\t\t\t\tstyle={ input_style }/>\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\n\t\treturn markup\n\t}\n}\n\n// Parses a partially entered phone number\n// and returns the national number so far.\n// Not using `libphonenumber-js`'s `parse`\n// function here because `parse` only works\n// when the number is fully entered,\n// and this one is for partially entered number.\nfunction parse_partial_number(value, country_code, metadata)\n{\n\t// \"As you type\" formatter\n\tconst formatter = new as_you_type(country_code, metadata)\n\n\t// Input partially entered phone number\n\tformatter.input(value)\n\n\t// Return the parsed partial phone number\n\t// (has `.national_number`, `.country`, etc)\n\treturn formatter\n}\n\n// Converts `value` to E.164 phone number format\nfunction e164(value, country_code, metadata)\n{\n\t// If the phone number is being input in a country-specific format\n\t//   If the value has a leading + sign\n\t//     The value stays as it is\n\t//   Else\n\t//     The value is converted to international plaintext\n\t// Else, the phone number is being input in an international format\n\t//   If the value has a leading + sign\n\t//     The value stays as it is\n\t//   Else\n\t//     The value is prepended with a + sign\n\n\tif (country_code)\n\t{\n\t\tif (value[0] === '+')\n\t\t{\n\t\t\treturn value\n\t\t}\n\n\t\tconst partial_national_number = parse_partial_number(value, country_code).national_number\n\t\treturn format(partial_national_number, country_code, 'International_plaintext', metadata)\n\t}\n\n\tif (value[0] === '+')\n\t{\n\t\treturn value\n\t}\n\n\treturn '+' + value\n}\n\nconst select_style =\n{\n\tdisplay       : 'inline-block',\n\tverticalAlign : 'bottom'\n}\n\nconst input_style = select_style\n\n// Gets country flag element by country code\nfunction get_country_option_icon(country_code, { flags, flagsPath })\n{\n\tif (flags === false)\n\t{\n\t\treturn undefined\n\t}\n\n\tif (flags && flags[country_code])\n\t{\n\t\treturn flags[country_code]\n\t}\n\n\treturn <img\n\t\tclassName=\"react-phone-number-input__icon\"\n\t\tsrc={`${flagsPath}${country_code.toLowerCase()}.svg`}/>\n}\n\n// Whether to add the \"International\" option to the list of countries\nfunction should_add_international_option(properties)\n{\n\tconst { countries, international } = properties\n\n\t// If this behaviour is explicitly set, then do as it says.\n\tif (international !== undefined)\n\t{\n\t\treturn international\n\t}\n\n\t// If `countries` is empty,\n\t// then only \"International\" option is available, so add it.\n\tif (countries.length === 0)\n\t{\n\t\treturn true\n\t}\n\n\t// If `countries` is a single allowed country,\n\t// then don't add the \"International\" option\n\t// because it would make no sense.\n\tif (countries.length === 1)\n\t{\n\t\treturn false\n\t}\n\n\t// Show the \"International\" option by default\n\treturn true\n}\n\n// Gets a text from dictionary\nfunction from_dictionary(key, properties)\n{\n\tconst { dictionary } = properties\n\n\treturn dictionary[key] || default_dictionary[key]\n}\n\n// Is it possible that the partially entered  phone number belongs to the given country\nfunction could_phone_number_belong_to_country(phone_number, country_code, metadata)\n{\n\t// Strip the leading `+`\n\tconst phone_number_digits = phone_number.slice(1)\n\n\tfor (const country_phone_code of Object.keys(metadata.country_phone_code_to_countries))\n\t{\n\t\tconst possible_country_phone_code = phone_number_digits.substring(0, country_phone_code.length)\n\t\tif (country_phone_code.indexOf(possible_country_phone_code) === 0)\n\t\t{\n\t\t\t// This country phone code is possible.\n\t\t\t// Does the given country correspond to this country phone code.\n\t\t\tif (metadata.country_phone_code_to_countries[country_phone_code].indexOf(country_code) >= 0)\n\t\t\t{\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n}"]}