{"version":3,"sources":["../source/input.js"],"names":["all_countries","default_dictionary","International","item","code","name","push","toUpperCase","Input","props","state","countries","value","dictionary","international","internationalIcon","flags","country","should_add_international_option","country_code","correct_initial_value_if_neccessary","select_options","label","from_dictionary","icon","undefined","get_country_option_icon","focus","bind","on_key_down","on_change","set_country","parse","format","country_select_toggled","on_country_select_tab_out","metadata","parsed","phone","text","slice","onCountryChange","setState","previous_country_code","set_country_code_value","national_number","parse_partial_number","character","could_phone_number_belong_to_country","formatter","input","template","findDOMNode","event","onKeyDown","keyCode","select","toggle","onChange","e164","is_shown","country_select_is_shown","preventDefault","setTimeout","length","new_props","indexOf","saveOnIcons","showCountrySelect","flagsPath","disabled","style","className","input_props","markup","valid","can_change_country","ref","select_style","input_style","propTypes","string","func","isRequired","onBlur","bool","objectOf","arrayOf","oneOfType","PropTypes","element","object","shape","defaultProps","partial_national_number","display","verticalAlign","toLowerCase","properties","key","phone_number","phone_number_digits","country_phone_code_to_countries","country_phone_code","possible_country_phone_code","substring"],"mappings":"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","file":"input.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport ReactDOM from 'react-dom'\nimport { as_you_type, parse, format } from 'libphonenumber-js'\nimport { ReactInput } from 'input-format'\nimport classNames from 'classnames'\n\n// Not importing here directly from `react-responsive-ui` npm package\n// just to reduce the overall bundle size.\nimport { Select } from './react-responsive-ui'\n\nimport country_names from './country names.json'\nimport International_icon from './international icon'\n\n// A list of all country codes\nconst all_countries = []\n\n// Country code to country name map\nconst default_dictionary =\n{\n\tInternational: 'International'\n}\n\n// Populate `all_countries` and `default_dictionary`\nfor (const item of country_names)\n{\n\tconst [code, name] = item\n\n\tall_countries.push(code.toUpperCase())\n\tdefault_dictionary[code.toUpperCase()] = name\n}\n\n// Allows passing custom `libphonenumber-js` metadata\n// to reduce the overall bundle size.\nexport default class Input extends Component\n{\n\tstatic propTypes =\n\t{\n\t\t// Phone number `value`.\n\t\t// Is a plaintext international phone number\n\t\t// (e.g. \"+12223333333\" for USA)\n\t\tvalue : PropTypes.string,\n\n\t\t// This handler is called each time\n\t\t// the phone number <input/> changes its textual value.\n\t\tonChange : PropTypes.func.isRequired,\n\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t\t// so that it gets a parsed `value` in its `onBlur` handler,\n\t\t// not the formatted one.\n\t\t// (`redux-form` passed `onBlur` to this component\n\t\t//  and this component intercepts that `onBlur`\n\t\t//  to make sure it works correctly with `redux-form`)\n\t\tonBlur : PropTypes.func,\n\n\t\t// Set `onKeyDown` handler.\n\t\t// Can be used in special cases to handle e.g. enter pressed\n\t\tonKeyDown : PropTypes.func,\n\n\t\t// Disables both the <input/> and the <select/>\n\t\t// (is `false` by default)\n\t\tdisabled : PropTypes.bool.isRequired,\n\n\t\t// Two-letter country code\n\t\t// to be used as the default country\n\t\t// for local (non-international) phone numbers.\n\t\tcountry : PropTypes.string,\n\n\t\t// Is called when the selected country changes\n\t\t// (either by a user manually, or by autoparsing\n\t\t//  an international phone number being input).\n\t\t// This handler does not need to update the `country` property.\n\t\t// It's simply a listener for those who might need that for whatever purpose.\n\t\tonCountryChange : PropTypes.func,\n\n\t\t// Localization dictionary:\n\t\t// `{ International: 'Международный', RU: 'Россия', US: 'США', ... }`\n\t\tdictionary : PropTypes.objectOf(PropTypes.string),\n\n\t\t// An optional list of allowed countries\n\t\tcountries : PropTypes.arrayOf(PropTypes.string).isRequired,\n\n\t\t// Custom national flag icons\n\t\tflags : PropTypes.oneOfType\n\t\t([\n\t\t\tPropTypes.objectOf(React.PropTypes.element),\n\t\t\tPropTypes.bool\n\t\t]),\n\n\t\t// A base URL path for national flag SVG icons.\n\t\t// By default it uses the ones from `flag-icon-css` github repo.\n\t\tflagsPath : PropTypes.string.isRequired,\n\n\t\t// If set to `false`, then country flags will be shown\n\t\t// for all countries in the options list\n\t\t// (not just for selected country).\n\t\tsaveOnIcons : PropTypes.bool.isRequired,\n\n\t\t// Whether to show country `<Select/>`\n\t\t// (is `true` by default)\n\t\tshowCountrySelect : PropTypes.bool.isRequired,\n\n\t\t// Whether to add the \"International\" option\n\t\t// to the list of countries.\n\t\tinternational : PropTypes.bool,\n\n\t\t// Custom \"International\" phone number type icon.\n\t\tinternationalIcon : PropTypes.element.isRequired,\n\n\t\t// CSS style object\n\t\tstyle : PropTypes.object,\n\n\t\t// CSS class\n\t\tclassName : PropTypes.string,\n\n\t\t// `libphonenumber-js` metadata\n\t\tmetadata : PropTypes.shape\n\t\t({\n\t\t\tcountries : PropTypes.object.isRequired\n\t\t})\n\t\t.isRequired\n\t}\n\n\tstatic defaultProps =\n\t{\n\t\t// Is enabled\n\t\tdisabled: false,\n\n\t\t// Include all countries by default\n\t\tcountries: all_countries,\n\n\t\t// By default use the ones from `flag-icon-css` github repo.\n\t\tflagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\n\n\t\t// Default international icon (globe)\n\t\tinternationalIcon: <div className=\"react-phone-number-input__icon react-phone-number-input__icon--international\"><International_icon/></div>,\n\n\t\t// Custom country names\n\t\tdictionary: {},\n\n\t\t// Don't show flags for all countries in the options list\n\t\t// (show it just for selected country).\n\t\t// (to save user's traffic because all flags are about 3 MegaBytes)\n\t\tsaveOnIcons: true,\n\n\t\t// Show country `<Select/>` by default\n\t\tshowCountrySelect: true\n\t}\n\n\tstate = {}\n\n\tconstructor(props)\n\t{\n\t\tsuper(props)\n\n\t\tconst\n\t\t{\n\t\t\tcountries,\n\t\t\tvalue,\n\t\t\tdictionary,\n\t\t\tinternational,\n\t\t\tinternationalIcon,\n\t\t\tflags\n\t\t}\n\t\t= props\n\n\t\tlet { country } = props\n\n\t\t// If there will be no \"International\" option\n\t\t// then a `country` must be selected.\n\t\tif (!should_add_international_option(props) && !country)\n\t\t{\n\t\t\tcountry = countries[0]\n\t\t}\n\n\t\t// Set the currently selected country\n\t\tthis.state.country_code = country\n\n\t\t// If a phone number `value` is passed then format it\n\t\tif (value)\n\t\t{\n\t\t\t// Set the currently entered `value`\n\t\t\tthis.state.value = this.correct_initial_value_if_neccessary(value, country)\n\t\t}\n\n\t\t// `<Select/>` options\n\t\tthis.select_options = []\n\n\t\t// Add the \"International\" option to the country list (if suitable)\n\t\tif (should_add_international_option(props))\n\t\t{\n\t\t\tthis.select_options.push\n\t\t\t({\n\t\t\t\tlabel : from_dictionary('International', props),\n\t\t\t\ticon  : flags === false ? undefined : internationalIcon\n\t\t\t})\n\t\t}\n\n\t\t// Add a `<Select/>` option for each country\n\t\tfor (const country_code of countries)\n\t\t{\n\t\t\tthis.select_options.push\n\t\t\t({\n\t\t\t\tvalue : country_code,\n\t\t\t\tlabel : from_dictionary(country_code, props),\n\t\t\t\ticon  : get_country_option_icon(country_code, props)\n\t\t\t})\n\t\t}\n\n\t\tthis.focus       = this.focus.bind(this)\n\t\tthis.on_key_down = this.on_key_down.bind(this)\n\t\tthis.on_change   = this.on_change.bind(this)\n\t\tthis.set_country = this.set_country.bind(this)\n\t\tthis.parse       = this.parse.bind(this)\n\t\tthis.format      = this.format.bind(this)\n\n\t\tthis.country_select_toggled    = this.country_select_toggled.bind(this)\n\t\tthis.on_country_select_tab_out = this.on_country_select_tab_out.bind(this)\n\t}\n\n\t// If the country code is specified\n\t//   If the value has a leading plus sign\n\t//     If it converts into a valid national number for this country\n\t//       Then the value is set to be that national number\n\t//     Else\n\t//       The leading + sign is trimmed\n\t//   Else\n\t//     The value stays as it is\n\t// Else\n\t//   If the value has a leading + sign\n\t//     The value stays as it is\n\t//   Else\n\t//     The + sign is prepended\n\t//\n\tcorrect_initial_value_if_neccessary(value, country_code)\n\t{\n\t\tconst { metadata } = this.props\n\n\t\tif (!value)\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\t// If the country code is specified\n\t\tif (country_code)\n\t\t{\n\t\t\t// If the value has a leading plus sign\n\t\t\tif (value[0] === '+')\n\t\t\t{\n\t\t\t\t// If it's a fully-entered phone number\n\t\t\t\t// that converts into a valid national number for this country\n\t\t\t\t// then the value is set to be that national number.\n\n\t\t\t\tconst parsed = parse(value, metadata)\n\n\t\t\t\tif (parsed.country === country_code)\n\t\t\t\t{\n\t\t\t\t\treturn this.format(parsed.phone, country_code).text\n\t\t\t\t}\n\n\t\t\t\t// Else the leading + sign is trimmed.\n\t\t\t\treturn value.slice(1)\n\t\t\t}\n\n\t\t\t// Else the value stays as it is\n\t\t\treturn value\n\t\t}\n\n\t\t// The country is not set.\n\t\t// Assuming that's an international phone number.\n\n\t\t// If the value has a leading + sign\n\t\tif (value[0] === '+')\n\t\t{\n\t\t\t// The value is correct\n\t\t\treturn value\n\t\t}\n\n\t\t// The + sign is prepended\n\t\treturn '+' + value\n\t}\n\n\tset_country_code_value(country_code)\n\t{\n\t\tconst { onCountryChange } = this.props\n\n\t\tif (onCountryChange)\n\t\t{\n\t\t\tonCountryChange(country_code)\n\t\t}\n\n\t\tthis.setState({ country_code })\n\t}\n\n\t// `<select/>` `onChange` handler\n\tset_country(country_code)\n\t{\n\t\tconst { metadata } = this.props\n\n\t\t// Previously selected country\n\t\tconst previous_country_code = this.state.country_code\n\n\t\tthis.set_country_code_value(country_code)\n\n\t\t// Adjust the phone number (`value`)\n\t\t// according to the selected `country_code`\n\n\t\tlet { value } = this.state\n\n\t\t// If switching to a country from International\n\t\t//   If the international number belongs to this country\n\t\t//     Convert it to a national number\n\t\t//   Else\n\t\t//     Trim the leading + sign\n\t\t//\n\t\t// If switching to a country from a country\n\t\t//   If the value has a leading + sign\n\t\t//     If the international number belongs to this country\n\t\t//       Convert it to a national number\n\t\t//     Else\n\t\t//       Trim the leading + sign\n\t\t//   Else\n\t\t//     The value stays as it is\n\t\t//\n\t\t// If switching to International from a country\n\t\t//   If the value has a leading + sign\n\t\t//     The value stays as it is\n\t\t//   Else\n\t\t//     Take the international plaintext value\n\n\t\tif (value)\n\t\t{\n\t\t\t// If switching to a country from International\n\t\t\tif (!previous_country_code && country_code)\n\t\t\t{\n\t\t\t\t// The value is international plaintext\n\t\t\t\tconst parsed = parse(value, metadata)\n\n\t\t\t\t// If it's for this country,\n\t\t\t\t// then convert it to a national number\n\t\t\t\tif (parsed.country === country_code)\n\t\t\t\t{\n\t\t\t\t\tvalue = this.format(parsed.phone, country_code).text\n\t\t\t\t}\n\t\t\t\t// Else just trim the + sign\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvalue = value.slice(1)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (previous_country_code && country_code)\n\t\t\t{\n\t\t\t\tif (value[0] === '+')\n\t\t\t\t{\n\t\t\t\t\tconst parsed = parse(value, metadata)\n\n\t\t\t\t\tif (parsed.country === country_code)\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue = this.format(parsed.phone, country_code).text\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue = value.slice(1)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If switching to International from a country\n\t\t\tif (previous_country_code && !country_code)\n\t\t\t{\n\t\t\t\t// If no leading + sign\n\t\t\t\tif (value[0] !== '+')\n\t\t\t\t{\n\t\t\t\t\t// Take the international plaintext value\n\t\t\t\t\tconst national_number = parse_partial_number(value, previous_country_code, metadata).national_number\n\t\t\t\t\tvalue = format(national_number, previous_country_code, 'International_plaintext', metadata)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update the adjusted `value`\n\t\t\t// and update `this.props.value` (in e.164 phone number format)\n\t\t\t// according to the new `this.state.value`.\n\t\t\t// (keep them in sync)\n\t\t\tthis.on_change(value, country_code)\n\t\t}\n\n\t\t// Focus the phone number input upon country selection\n\t\t// (do it in a timeout because the `<input/>`\n\t\t//  is hidden while selecting a country)\n\t\t// setTimeout(this.focus, 0)\n\t}\n\n\t// `input-format` `parse` character function\n\t// https://github.com/halt-hammerzeit/input-format\n\tparse(character, value)\n\t{\n\t\tconst { countries } = this.props\n\n\t\tif (character === '+')\n\t\t{\n\t\t\t// Only allow a leading `+`\n\t\t\tif (!value)\n\t\t\t{\n\t\t\t\t// If the \"International\" option is available\n\t\t\t\t// then allow the leading `+` because it's meant to be this way.\n\t\t\t\t//\n\t\t\t\t// Otherwise, the leading `+` will either erase all subsequent digits\n\t\t\t\t// (if they're not appropriate for the selected country)\n\t\t\t\t// or the subsequent digits (if any) will join the `+`\n\t\t\t\t// forming an international phone number. Because a user\n\t\t\t\t// might be comfortable with entering an international phone number\n\t\t\t\t// (i.e. with country code) rather than the local one.\n\t\t\t\t// Therefore such possibility is given.\n\t\t\t\t//\n\t\t\t\treturn character\n\t\t\t}\n\t\t}\n\t\t// For digits\n\t\telse if (character >= '0' && character <= '9')\n\t\t{\n\t\t\tconst { metadata } = this.props\n\t\t\tconst { country_code } = this.state\n\n\t\t\t// If the \"International\" option is not available\n\t\t\t// and if the value has a leading `+`\n\t\t\t// then it means that the phone number being entered\n\t\t\t// is an international one, so only allow the country phone code\n\t\t\t// for the selected country to be entered.\n\n\t\t\tif (!should_add_international_option(this.props) && value && value[0] === '+')\n\t\t\t{\n\t\t\t\tif (!could_phone_number_belong_to_country(value + character, country_code, metadata))\n\t\t\t\t{\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\treturn character\n\t\t\t}\n\n\t\t\treturn character\n\t\t}\n\t}\n\n\t// `input-format` `format` function\n\t// https://github.com/halt-hammerzeit/input-format\n\tformat(value, country_code = this.state.country_code)\n\t{\n\t\tconst { metadata } = this.props\n\n\t\t// `value` is already parsed input, i.e.\n\t\t// either International plaintext phone number\n\t\t// or just local phone number digits.\n\n\t\t// \"As you type\" formatter\n\t\tconst formatter = new as_you_type(country_code, metadata)\n\n\t\t// Is used to check if a country code can already be derived\n\t\tthis.formatter = formatter\n\n\t\t// Format phone number\n\t\tconst text = formatter.input(value)\n\n\t\treturn { text, template: formatter.template }\n\t}\n\n\t// Can be called externally\n\tfocus()\n\t{\n\t\tReactDOM.findDOMNode(this.input).focus()\n\t}\n\n\t// `<input/>` `onKeyDown` handler\n\ton_key_down(event)\n\t{\n\t\tconst { onKeyDown } = this.props\n\n\t\t// Expand country `<select/>`` on \"Down arrow\" key press\n\t\tif (event.keyCode === 40)\n\t\t{\n\t\t\tthis.select.toggle()\n\t\t}\n\n\t\tif (onKeyDown)\n\t\t{\n\t\t\tonKeyDown(event)\n\t\t}\n\t}\n\n\t// `<input/>` `onChange` handler.\n\t// Updates `this.props.value` (in e.164 phone number format)\n\t// according to the new `this.state.value`.\n\t// (keeps them in sync)\n\ton_change(value, country_code = this.state.country_code)\n\t{\n\t\tconst { metadata, onChange } = this.props\n\n\t\t// If the `<input/>` is empty then just exit\n\t\tif (!value)\n\t\t{\n\t\t\tthis.setState({ value })\n\t\t\treturn onChange(value)\n\t\t}\n\n\t\t// If a phone number is being input as an international one\n\t\t// and the country code can already be derived,\n\t\t// then switch the country.\n\t\t// (`001` is a special \"non-geograpical entity\" code in `libphonenumber` library)\n\t\tif (value[0] === '+' && this.formatter.country && this.formatter.country !== '001')\n\t\t{\n\t\t\tcountry_code = this.formatter.country\n\t\t\tthis.set_country_code_value(country_code)\n\t\t}\n\n\t\t// If \"International\" mode is selected\n\t\t// and the `value` doesn't start with a + sign,\n\t\t// then prepend it to the `value`.\n\t\tif (value[0] !== '+' && !country_code)\n\t\t{\n\t\t\tvalue = '+' + value\n\t\t}\n\n\t\t// Convert `value` to E.164 phone number format\n\t\t// and write it to `this.props.value`.\n\t\tonChange(e164(value, country_code, metadata))\n\n\t\t// Update the `value`\n\t\tthis.setState({ value })\n\t}\n\n\t// When country `<select/>` is toggled\n\tcountry_select_toggled(is_shown)\n\t{\n\t\tthis.setState({ country_select_is_shown: is_shown })\n\t}\n\n\t// Focuses the `<input/>` field\n\t// on tab out of the country `<select/>`\n\ton_country_select_tab_out(event)\n\t{\n\t\tevent.preventDefault()\n\n\t\t// Focus the phone number input upon country selection\n\t\t// (do it in a timeout because the `<input/>`\n\t\t//  is hidden while selecting a country)\n\t\tsetTimeout(this.focus, 0)\n\t}\n\n\t// Can a user change the default country or not.\n\tcan_change_country()\n\t{\n\t\tconst { countries } = this.props\n\n\t\t// If `countries` is empty,\n\t\t// then only \"International\" option is available,\n\t\t// so can't switch it.\n\t\t//\n\t\t// If `countries` is a single allowed country,\n\t\t// then cant's switch it.\n\t\t//\n\t\treturn countries.length > 1\n\t}\n\n\t// Listen for default country property:\n\t// if it is set after the page loads\n\t// and the user hasn't selected a country yet\n\t// then select the default country.\n\tcomponentWillReceiveProps(new_props)\n\t{\n\t\tconst { countries, country, value } = this.props\n\n\t\t// If the default country changed\n\t\t// (e.g. in case of IP detection)\n\t\tif (new_props.country !== country)\n\t\t{\n\t\t\t// If the phone number input field is currently empty\n\t\t\t// (e.g. not touched yet) then change the selected `country`\n\t\t\t// to the newly passed one (e.g. as a result of a GeoIP query)\n\t\t\tif (!value)\n\t\t\t{\n\t\t\t\t// If the passed `country` allowed then update it\n\t\t\t\tif (countries.indexOf(new_props.country) !== -1)\n\t\t\t\t{\n\t\t\t\t\t// Set the new `country`\n\t\t\t\t\tthis.set_country(new_props.country)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\trender()\n\t{\n\t\tconst\n\t\t{\n\t\t\tdictionary,\n\t\t\tsaveOnIcons,\n\t\t\tshowCountrySelect,\n\t\t\tinternational,\n\t\t\tinternationalIcon,\n\t\t\tcountry,\n\t\t\tcountries,\n\t\t\tonCountryChange,\n\t\t\tflags,\n\t\t\tflagsPath,\n\t\t\tdisabled,\n\t\t\tstyle,\n\t\t\tclassName,\n\t\t\tmetadata,\n\t\t\t...input_props\n\t\t}\n\t\t= this.props\n\n\t\tconst { country_select_is_shown } = this.state\n\n\t\tconst markup =\n\t\t(\n\t\t\t<div style={ style } className={ classNames('react-phone-number-input', className,\n\t\t\t{\n\t\t\t\t'react-phone-number-input--valid': this.formatter && this.formatter.valid\n\t\t\t}) }>\n\t\t\t\t{ showCountrySelect && this.can_change_country() &&\n\t\t\t\t\t<Select\n\t\t\t\t\t\tref={ ref => this.select = ref }\n\t\t\t\t\t\tvalue={ this.state.country_code }\n\t\t\t\t\t\toptions={ this.select_options }\n\t\t\t\t\t\tonChange={ this.set_country }\n\t\t\t\t\t\tdisabled={ disabled }\n\t\t\t\t\t\tonToggle={ this.country_select_toggled }\n\t\t\t\t\t\tonTabOut={ this.on_country_select_tab_out }\n\t\t\t\t\t\tautocomplete\n\t\t\t\t\t\tautocompleteShowAll\n\t\t\t\t\t\tconcise\n\t\t\t\t\t\tfocusUponSelection={ false }\n\t\t\t\t\t\tsaveOnIcons={ saveOnIcons }\n\t\t\t\t\t\tname={ input_props.name ? `${input_props.name}__country` : undefined }\n\t\t\t\t\t\tclassName=\"react-phone-number-input__country\"\n\t\t\t\t\t\tstyle={ select_style }/>\n\t\t\t\t}\n\n\t\t\t\t{ !country_select_is_shown &&\n\t\t\t\t\t<ReactInput\n\t\t\t\t\t\t{ ...input_props }\n\t\t\t\t\t\tref={ ref => this.input = ref }\n\t\t\t\t\t\tvalue={ this.state.value }\n\t\t\t\t\t\tonChange={ this.on_change }\n\t\t\t\t\t\tdisabled={ disabled }\n\t\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\t\tparse={ this.parse }\n\t\t\t\t\t\tformat={ this.format }\n\t\t\t\t\t\tonKeyDown={ this.on_key_down }\n\t\t\t\t\t\tclassName={ classNames('react-phone-number-input__phone',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'react-phone-number-input__phone--valid': this.formatter && this.formatter.valid\n\t\t\t\t\t\t}) }\n\t\t\t\t\t\tstyle={ input_style }/>\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\n\t\treturn markup\n\t}\n}\n\n// Parses a partially entered phone number\n// and returns the national number so far.\n// Not using `libphonenumber-js`'s `parse`\n// function here because `parse` only works\n// when the number is fully entered,\n// and this one is for partially entered number.\nfunction parse_partial_number(value, country_code, metadata)\n{\n\t// \"As you type\" formatter\n\tconst formatter = new as_you_type(country_code, metadata)\n\n\t// Input partially entered phone number\n\tformatter.input(value)\n\n\t// Return the parsed partial phone number\n\t// (has `.national_number`, `.country`, etc)\n\treturn formatter\n}\n\n// Converts `value` to E.164 phone number format\nfunction e164(value, country_code, metadata)\n{\n\t// If the phone number is being input in a country-specific format\n\t//   If the value has a leading + sign\n\t//     The value stays as it is\n\t//   Else\n\t//     The value is converted to international plaintext\n\t// Else, the phone number is being input in an international format\n\t//   If the value has a leading + sign\n\t//     The value stays as it is\n\t//   Else\n\t//     The value is prepended with a + sign\n\n\tif (country_code)\n\t{\n\t\tif (value[0] === '+')\n\t\t{\n\t\t\treturn value\n\t\t}\n\n\t\tconst partial_national_number = parse_partial_number(value, country_code).national_number\n\t\treturn format(partial_national_number, country_code, 'International_plaintext', metadata)\n\t}\n\n\tif (value[0] === '+')\n\t{\n\t\treturn value\n\t}\n\n\treturn '+' + value\n}\n\nconst select_style =\n{\n\tdisplay       : 'inline-block',\n\tverticalAlign : 'bottom'\n}\n\nconst input_style = select_style\n\n// Gets country flag element by country code\nfunction get_country_option_icon(country_code, { flags, flagsPath })\n{\n\tif (flags === false)\n\t{\n\t\treturn undefined\n\t}\n\n\tif (flags && flags[country_code])\n\t{\n\t\treturn flags[country_code]\n\t}\n\n\treturn <img\n\t\tclassName=\"react-phone-number-input__icon\"\n\t\tsrc={`${flagsPath}${country_code.toLowerCase()}.svg`}/>\n}\n\n// Whether to add the \"International\" option to the list of countries\nfunction should_add_international_option(properties)\n{\n\tconst { countries, international } = properties\n\n\t// If this behaviour is explicitly set, then do as it says.\n\tif (international !== undefined)\n\t{\n\t\treturn international\n\t}\n\n\t// If `countries` is empty,\n\t// then only \"International\" option is available, so add it.\n\tif (countries.length === 0)\n\t{\n\t\treturn true\n\t}\n\n\t// If `countries` is a single allowed country,\n\t// then don't add the \"International\" option\n\t// because it would make no sense.\n\tif (countries.length === 1)\n\t{\n\t\treturn false\n\t}\n\n\t// Show the \"International\" option by default\n\treturn true\n}\n\n// Gets a text from dictionary\nfunction from_dictionary(key, properties)\n{\n\tconst { dictionary } = properties\n\n\treturn dictionary[key] || default_dictionary[key]\n}\n\n// Is it possible that the partially entered  phone number belongs to the given country\nfunction could_phone_number_belong_to_country(phone_number, country_code, metadata)\n{\n\t// Strip the leading `+`\n\tconst phone_number_digits = phone_number.slice(1)\n\n\tfor (const country_phone_code of Object.keys(metadata.country_phone_code_to_countries))\n\t{\n\t\tconst possible_country_phone_code = phone_number_digits.substring(0, country_phone_code.length)\n\t\tif (country_phone_code.indexOf(possible_country_phone_code) === 0)\n\t\t{\n\t\t\t// This country phone code is possible.\n\t\t\t// Does the given country correspond to this country phone code.\n\t\t\tif (metadata.country_phone_code_to_countries[country_phone_code].indexOf(country_code) >= 0)\n\t\t\t{\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n}\n"]}